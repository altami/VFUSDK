<?xml version="1.0"?>
<doc>
  <assembly>
    <name>VFU</name>
  </assembly>
  <members>
    <member name="T:VFU.Streaming.CameraDisconnectedException">
      <summary>
            Camera disconnected exception. device = null.
            </summary>
    </member>
    <member name="M:VFU.Streaming.CameraDisconnectedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.CameraDisconnectedException">CameraDisconnectedException</see> class. 
            </summary>
      <param name="message">message</param>
    </member>
    <member name="M:VFU.Streaming.CameraDisconnectedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.CameraDisconnectedException">CameraDisconnectedException</see> class. 
            </summary>
      <param name="message">message</param>
      <param name="inner">inner</param>
    </member>
    <member name="T:VFU.Streaming.StreamProcessingException">
      <summary>
            Exception class for invalid image data processing.
            </summary>
      <remarks>
            This exception is thrown when image data processing fails.
            </remarks>
    </member>
    <member name="M:VFU.Streaming.StreamProcessingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.StreamProcessingException">StreamProcessingException</see> class. 
            </summary>
      <param name="message">message</param>
    </member>
    <member name="M:VFU.Streaming.StreamProcessingException.#ctor(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">message</param>
      <param name="inner">inner</param>
    </member>
    <member name="T:VFU.Streaming.StreamCallbackException">
      <summary>
            Exception class for streaming image or frame dropped handling 
            callback exceptions during streaming operation.
            </summary>
      <remarks>
            This exception is thrown as result of any uncatched exceptions in the 
            image or frame dropped user callback methods if defined.
            </remarks>
    </member>
    <member name="M:VFU.Streaming.StreamCallbackException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.StreamCallbackException">StreamCallbackException</see> class. 
            </summary>
      <param name="message">message</param>
    </member>
    <member name="M:VFU.Streaming.StreamCallbackException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.StreamCallbackException">StreamCallbackException</see> class. 
            </summary>
      <param name="message">message</param>
      <param name="inner">inner</param>
    </member>
    <member name="T:VFU.Streaming.StreamAbortedException">
      <summary>
            Exception class for streaming termination events as result of
            internal errors.
            </summary>
      <remarks>
            This exception is thrown when the streaming was terminated 
            as result of internal errors.
            </remarks>
    </member>
    <member name="M:VFU.Streaming.StreamAbortedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.StreamAbortedException">StreamAbortedException</see> class. 
            </summary>
      <param name="message">message</param>
    </member>
    <member name="M:VFU.Streaming.StreamAbortedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.StreamAbortedException">StreamAbortedException</see> class. 
            </summary>
      <param name="message">message</param>
      <param name="inner">inner</param>
    </member>
    <member name="T:VFU.Streaming.FrameDroppedException">
      <summary>
            Invalid checksum exception. 
            </summary>
    </member>
    <member name="M:VFU.Streaming.FrameDroppedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.FrameDroppedException">FrameDroppedException</see> class. 
            </summary>
      <param name="message">message</param>
    </member>
    <member name="M:VFU.Streaming.FrameDroppedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.FrameDroppedException">FrameDroppedException</see> class. 
            </summary>
      <param name="message">message</param>
      <param name="inner">inner</param>
    </member>
    <member name="T:VFU.Streaming.StreamCallbackTimeoutException">
      <summary>
            Exception class for timeout handling of streaming callback methods. When
            a stream is running stopped stream is stopped  the streaming can only
            completed successfully when the streaming callback  is returned from the
            user code. To prevent the user for making dead locks  the max. execution
            time for the streaming callback to finish when the stream  was stopped a
            timeout can defined. When this timeout is exceeded the user callback is
            aborted using a <see cref="T:System.Threading.ThreadAbortException" /> to allow a finishing
            of the stream stopping method. If a StreamErrorCallback method  was
            defined it is called with this exception as argument.
            </summary>
      <remarks>
            This exception is thrown when no a image data transfer is failed during 
            streaming.
            </remarks>
    </member>
    <member name="M:VFU.Streaming.StreamCallbackTimeoutException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.StreamCallbackTimeoutException">StreamCallbackTimeoutException</see> class. 
            </summary>
      <param name="message">message</param>
    </member>
    <member name="M:VFU.Streaming.StreamCallbackTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.Streaming.StreamCallbackTimeoutException">StreamCallbackTimeoutException</see> class. 
            </summary>
      <param name="message">message</param>
      <param name="inner">inner</param>
    </member>
    <member name="T:VFU.VfuCameraManager">
      <summary>
            VfuCameraManager class to manage plug and play of all VFU cameras.
            </summary>
    </member>
    <member name="M:VFU.VfuCameraManager.Init">
      <summary>
            Common initializing of plug and play handling. 
            </summary>
    </member>
    <member name="M:VFU.VfuCameraManager.Init(VFU.PlugInOutCallbackDelegate)">
      <summary>
            Common initializing of plug and play handling. 
            </summary>
      <param name="pnpCallback">PlugInOut callback adress.</param>
    </member>
    <member name="M:VFU.VfuCameraManager.Dispose">
      <summary>
            Dispose all VFU camera objects.
            </summary>
    </member>
    <member name="P:VFU.VfuCameraManager.VFUCameraObjects">
      <summary>
            Get connected cameras in an object array.
            </summary>
      <returns>
            Camera object list of connected cameras.
            </returns>
    </member>
    <member name="E:VFU.VfuCameraManager.PlugInOutEvent">
      <summary>
            Event that is raised when a VFU cameras was plugged in or out.
            </summary>
    </member>
    <member name="T:VFU.PlugAction">
      <summary>
            Define elements to distinguish between plug in and plug out events.
            </summary>
      <remarks>Used as argument type by <see cref="!:" /></remarks>
    </member>
    <member name="F:VFU.PlugAction.PlugIn">
      <summary>
            VFU camera device was plugged in (connected to USB).
            </summary>
    </member>
    <member name="F:VFU.PlugAction.PlugOut">
      <summary>
            VFU camera device was plugged out (disconnected from USB).
            </summary>
    </member>
    <member name="T:VFU.PlugInOutCallbackDelegate">
      <summary>
            Common plug and play callback delegate. Is used as argument type by 
            <see cref="M:VFU.VfuCameraManager.Init(VFU.PlugInOutCallbackDelegate)" /> to define
            a callback method which is called in case of a plug in or out action of
            VFU cameras.
            </summary>
      <param name="plugAction">Indicates whether the cause of the call was a
            plug in or plug out.</param>
      <param name="pnpVfuCameraObjects">Array with VFU camera objects of new
            attached or disconnected VFU cameras. When a VFU cameras was
            disconnected  the corresponding VFU camera object was disposed and any
            access to it will throw  a <see cref="T:System.ObjectDisposedException" />.
            </param>
    </member>
    <member name="T:VFU.IVFUCam">
      <summary>
            Universal Interface to VFU Camera
            </summary>
      <remarks>
            Use this Interface for implementation
            </remarks>
    </member>
    <member name="M:VFU.IVFUCam.CamIdGet(System.Int32@)">
      <summary>
            Gets a unique Camera ID
            </summary>
      <param name="camId">Camera ID</param>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessControlSet(VFU.Target,VFU.Target)">
      <summary>
            Sets current configuration of Automatic Brightness Control.
            </summary>
      <remarks>
        <paramref name="aecTarget" /> = Hardware: Integration time is calculated on
            hardware and updated immediately. 
            <para><paramref name="aecTarget" /> = Software: With every image aquisition
            integration time is recalculated in API and set to camera. </para><para><paramref name="agcTarget" /> = Hardware: Analog Gain is calculated on
            hardware and updated immediately. </para><para><paramref name="agcTarget" /> = Software: Analog Gain is calculated on
            Software by every image aquisition.</para><para></para><para>Software automatic brightness control will update brightness only on every
            image aquisition. The time to reach the target brigthness depends on image
            aquisition rate.</para><para>If target hardware is selected brightness will be calculated and updated
            with every frame sensor outputs. (FreeRunning mode). The time to reach the
            target brigthness depends on the framerate of image sensor.</para><para></para><para>In a camera independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            of the connected camera.</para></remarks>
      <param name="aecTarget">Target for automatic exposure control (AEC). Selectable
            targets are: Off, Software, Hardware.</param>
      <param name="agcTarget">Target for automatic gain control (AGC). Selectable
            targets are: Off, Software, Hardware.</param>
      <exception cref="T:System.NotSupportedException">Thrown when method is not supported with
            given modes <paramref name="aecTarget" /> and <paramref name="agcTarget" />. Call
            support information method for <see cref="M:VFU.IVFUCam.AutoBrightnessControlSet(VFU.Target,VFU.Target)">AutoBrightnessControlSet</see> to check what
            modes are available to set.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessControlSet(VFU.Target,VFU.Target,System.Boolean@)">
      <summary>
            Corresponding information method. Use to check if selected configuration of
            Automatic Brightness Control is supported by the camera.
            </summary>
      <remarks>
            In a camera independent implementation this information method should be called,
            in order to check what are the supported configurations of the connected camera.
            </remarks>
      <param name="aecTarget">Target for AEC. Depending on camera type, selectable
            targets are: 
            <list type="bullet"><item><description>off</description></item><item><description>software</description></item><item><description>hardware</description></item></list></param>
      <param name="agcTarget">
        <list type="bullet">
          <item>
            <description>Target for AGC. Depending on camera type, selectable targets are:
            </description>
          </item>
          <item>
            <description>off</description>
          </item>
          <item>
            <description>software</description>
          </item>
          <item>
            <description>hardware</description>
          </item>
        </list>
      </param>
      <param name="supported">
        <list type="bullet">
          <item>
            <description>If set to <see langword="true" />, then the selected configuration
            is supported by the camera ; otherwise, configuration is not
            supported.</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessControlGet(VFU.Target@,VFU.Target@)">
      <summary>
            Gets current configuration of Automatic Brightness Control.
            </summary>
      <remarks>
            In a camera independent implementation the corresponding information method
            should be called, in order to check what are the supported configurations of the
            connected camera. 
            <para></para><para> Target for AGC. Depending on camera type, selectable targets are: </para><list type="bullet"><item><description>off</description></item><item><description>software</description></item><item><description>hardware</description></item></list><para></para><para>Target for AEC. Depending on camera type, selectable targets are: </para><list type="bullet"><item><description>off</description></item><item><description>software</description></item><item><description>hardware</description></item></list></remarks>
      <param name="aecTarget">Target for AEC. Depending on camera type</param>
      <param name="agcTarget">Target for AGC. Depending on camera type</param>
      <exception cref="T:System.NotSupportedException">Thrown when method is not supported.
            Call support information method for <see cref="!:_AutoBrightnessControlGet">AutoBrightnessControlGet</see> to check
            availability.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessControlGet(VFU.Target,VFU.Target,System.Boolean@)">
      <summary>
            Corresponding information method. Use to check if selected configuration of
            Automatic Brightness Control is supported by the camera.
            </summary>
      <remarks>
            In a camera independent implementation this information method should be called,
            in order to check what are the supported configurations of the connected camera.
            </remarks>
      <param name="aecTarget">Target for AEC. Depending on camera type, selectable
            targets are: 
            <list type="bullet"><item><description>off</description></item><item><description>software</description></item><item><description>hardware</description></item></list></param>
      <param name="agcTarget">
        <list type="bullet">
          <item>
            <description>Target for AGC. Depending on camera type, selectable targets are:
            </description>
          </item>
          <item>
            <description>off</description>
          </item>
          <item>
            <description>software</description>
          </item>
          <item>
            <description>hardware</description>
          </item>
        </list>
      </param>
      <param name="supported">
        <list type="bullet">
          <item>
            <description>If set to <see langword="true" />, then the selected configuration
            is supported by the camera ; otherwise, configuration is not
            supported.</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessRoiSet(System.Drawing.Rectangle)">
      <summary>
            Use to set the AutoBrightnessROI.
            </summary>
      <remarks>
            In a camera independent implementation the corresponding information method
            should be called, in order to check what are the supported configurations of the
            connected camera.
            </remarks>
      <param name="messRoi">Set AutoBrighthessROI. Set "null" to use current
            windows size.</param>
      <exception cref="T:System.NotSupportedException">Thrown when method is not supported.
            Call support information method for <see cref="!:_AutoBrightnessRoiSet">_AutoBrightnessRoiSet</see> to check
            availability.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the measurement ROI was
            empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when automatic brightness
            control is enabled and the ROI <paramref name="messRoi" /> is invalid for the
            selected configuration.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessRoiSet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessRoiInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="messRoi">Rectangle definition</param>
      <param name="supported">If set to <see langword="true" />, then the chosen usage
            of the method/parameters is supported; otherwise, it's not supported.</param>
      <param name="info">info structure that contains the range of legal values for
            messRoi parameters</param>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessRoiGet(System.Drawing.Rectangle@)">
      <summary>
            Use to get the current AutoBrightnessROI
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="messRoi">Contains the coordinates of the current
            AutoBrightnessROI</param>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessRoiGet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessRoiInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="messRoi">Contains the coordinates of the current
            AutoBrightnessROI</param>
      <param name="supported">If set to <see langword="true" />, then method is
            supported; otherwise, not.</param>
      <param name="info">info structur that contains legal range for
            parameters</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessTargetBrightnessSet(System.Double)">
      <summary>
            Set the target brightness
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            and legal values in combination with the connected camera.
            </remarks>
      <param name="targetBrightness">Mean value of targetBrightness.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.NotSupportedException">Thrown when method is not 
            supported. Call support information method for 
            <see cref="!:_AutoBrightnessTargetBrightnessSet" /> to check availability.
            </exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessTargetBrightnessSet(System.Double,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessTargetBrightnessInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <param name="targetBrightness">Mean value of targetBrightness</param>
      <param name="supported">If set to <see langword="true" />, then this method is
            supported; otherwise, not.</param>
      <param name="info">Contains legal values of targetBrightness</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessTargetBrightnessGet(System.Double@)">
      <summary>
            Gets the current targetBrightness for AutoBrightness
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="targetBrightness">Contains the current targetBrightness</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessTargetBrightnessGet(System.Double,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessTargetBrightnessInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="targetBrightness">Mean value of targetBrightness</param>
      <param name="supported">If set to <see langword="true" />, then method is
            supported; otherwise, not.</param>
      <param name="info">Contains legal values for targetBrightness</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessSpeedFactorSet(System.Double)">
      <summary>
            Set the SpeedFactor for AutoBrightness
            </summary>
      <remarks>
            SpeedFactor should be kept low in order to avoid instability of
            AutoBrightnessControl on variing scenes (such as halogen lamps) 
            <para></para><para>In a camera-hardware independent implementation the corresponding
            information method should be called, in order to check what are the supported
            configurations in combination with the connected camera.</para></remarks>
      <param name="speedFactor">Factor for speed of AutoBrightness Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
      <exception cref="T:System.NotSupportedException">Thrown when method is not supported.
            Call support information method for <see cref="!:_AutoBrightnessSpeedFactorSet">_AutoBrightnessSpeedFactorSet</see> to
            check availability.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessSpeedFactorSet(System.Double,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessSpeedFactorInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            SpeedFactor should be kept low in order to avoid instability of
            AutoBrightnessControl on variing scenes (such as halogen lamps)
            <para></para><para>In a camera-hardware independent implementation this information method
            should be called, in order to check what are the supported configurations in
            combination with the connected camera.</para></remarks>
      <param name="speedFactor">Factor for speed of AutoBrightness Controller</param>
      <param name="supported">If set to <see langword="true" />, then method is
            supported ; otherwise, not.</param>
      <param name="info">Contains legal values for speedFactor</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessSpeedFactorGet(System.Double@)">
      <summary>
            Set the SpeedFactor for AutoBrightness
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="speedFactor">Factor for speed of AutoBrightness Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessSpeedFactorGet(System.Double,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessSpeedFactorInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="speedFactor">Factor for speed of AutoBrightness Controller</param>
      <param name="supported">If set to <see langword="true" />, then this method is
            supported; otherwise, not supported.</param>
      <param name="info">Contains legal for speedFactor</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessEnableSet(System.Boolean)">
      <summary>
            Enable AutoBrightness
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="enable">If set to <see langword="true" />, then AutoBrightness is
            enabled ; 
            <para>otherwise, it is disabled.</para></param>
      <exception cref="T:System.NotSupportedException">Thrown when the automatic
            brightness is already enabled.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessEnableSet(System.Boolean,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="enable">If set to <see langword="true" />, then AutoBrightness is
            enabled; 
            <para>otherwise, it is disabled.</para></param>
      <param name="supported">If set to <see langword="true" />, then configuration is
            supported; 
            <para>otherwise, it is not supported.</para></param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessEnableGet(System.Boolean@)">
      <summary>
            Gets current status of AutoBrightness
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="enable">If set to <see langword="true" />, then AutoBrightness is
            enabled; 
            <para>otherwise, it is disabled.</para></param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AutoBrightnessEnableGet(System.Boolean,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="enable">If set to <see langword="true" />, then AutoBrightness is
            enabled; 
            <para>otherwise, it is disabled.</para></param>
      <param name="supported">If set to <see langword="true" />, then this method is
            supported; 
            <para>otherwise, it is not supported.</para></param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AsynchronousImageTransferSet(System.Boolean)">
      <summary>
            Switch between synchronous and asynchronous image data transfers.
            </summary>
      <remarks>
            The advantage of asynchronous image transfers is that you can receive images
            from multiple cameras at same time. The asynchronous mode is designed for use
            several USB host controllers on one pc with connecting one camera on every USB
            host controller:
            <para></para><para>Host Controller 1 &lt;--&gt; Cam1 </para><para>Host Controller 2 &lt;--&gt; Cam2 </para><para>Host Controller 3 &lt;--&gt; Cam3 </para><para>Host Controller 4 &lt;--&gt; Cam4 </para><para></para><para>Of course using asynchronous mode is possible to use with only one host
            controller, but is not recommended:</para><para></para><para>Host Controller 1 &lt;--&gt; Cam1, Cam2 </para><para></para><para>Here it is important that asynchronous image transfers can overconsume USB
            bandwidth. This means if too many asynchronous transfers are started and running
            frames will drop.</para><para></para><para>It is important that image methods are not thread safe if asynchronous
            mode is enabled. It is only allowed to access with one Thread imageGet methods
            to one camera.</para><para></para><para>If synchronous image transfer (default) is activated, transfers from
            multiple cameras are queued and transfered one after the other.</para><para></para><para>Example 1: Two cameras are connected to one host controller. Image
            resolution is 320x240. Frame rate of one camera is 60 fps.</para><para>In synchronous image transfer mode only one camera is transferring at one
            time, frame rate of both cameras is 30 fps.</para><para>In asynchronous image transfer mode both cameras are transferring at same
            time, frame rate of both cameras is 60 fps. Transfers do not overconsume USB
            bandwidth.</para><para></para><para>Example 2: Two cameras are connected to one host controller. Image
            resolution is 3664x2764. Frame rate of one camera is 3,5 fps.</para><para>In synchronous image transfer mode only one camera is transferring at one
            time, frame rate of both cameras is 1,75 fps.</para><para>In asynchronous image transfer mode both cameras are transferring at same
            time, frame rate of both cameras is 0 fps. Transfers overconsume USB bandwidth,
            and frames are dropping.</para><para></para><para>Example 3: Two host controllers. Camera A is connected to host controller
            A. Camera B is connected to host controller B. Image resolution is 3664x2764.
            Frame rate of one camera is 3,5 fps.</para><para>In synchronous image transfer mode only one camera is transferring at one
            time, frame rate of both cameras is 1,75 fps.</para><para>In asynchronous image transfer mode both cameras are transferring at same
            time, frame rate of both cameras is 3,5 fps. Transfers do not overconsume USB
            bandwidth.</para><para></para><para></para><para>In a camera-hardware independent implementation the corresponding
            information method should be called, in order to ceck what are the supported
            configurations in combination with the connected camera.</para><para></para></remarks>
      <param name="asyncMode">If set to <see langword="true" />, then Asynchronous mode
            is used; otherwise, synchronous mode is used.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AsynchronousImageTransferSet(System.Boolean,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="asyncMode">If set to <see langword="true" />, then Asynchronous mode
            is used; otherwise, synchronous mode is used.</param>
      <param name="supported">If set to <see langword="true" />, then Asynchronous
            Image Transfer is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AsynchronousImageTransferGet(System.Boolean@)">
      <summary>
            Get the current image data transfer setting.
            </summary>
      <remarks>
            The advantage of asynchronous image transfers is that you can receive images
            from multiple cameras at same time. The asynchronous mode is designed for use
            several USB host controllers on one pc with connecting one camera on every USB
            host controller:
            <para></para><para>Host Controller 1 &lt;--&gt; Cam1 </para><para>Host Controller 2 &lt;--&gt; Cam2 </para><para>Host Controller 3 &lt;--&gt; Cam3 </para><para>Host Controller 4 &lt;--&gt; Cam4 </para><para></para><para>Of course using asynchronous mode is possible to use with only one host
            controller, but is not recommended:</para><para></para><para>Host Controller 1 &lt;--&gt; Cam1, Cam2 </para><para></para><para>Here it is important that asynchronous image transfers can overconsume USB
            bandwidth. This means if too many asynchronous transfers are started and running
            frames will drop.</para><para></para><para>It is important that image methods are not thread safe if asynchronous
            mode is enabled. It is only allowed to access with one Thread imageGet methods
            to one camera.</para><para></para><para>If synchronous image transfer (default) is activated, transfers from
            multiple cameras are queued and transfered one after the other.</para><para></para><para>Example 1: Two cameras are connected to one host controller. Image
            resolution is 320x240. Frame rate of one camera is 60 fps.</para><para>In synchronous image transfer mode only one camera is transferring at one
            time, frame rate of both cameras is 30 fps.</para><para>In asynchronous image transfer mode both cameras are transferring at same
            time, frame rate of both cameras is 60 fps. Transfers do not overconsume USB
            bandwidth.</para><para></para><para>Example 2: Two cameras are connected to one host controller. Image
            resolution is 3664x2764. Frame rate of one camera is 3,5 fps.</para><para>In synchronous image transfer mode only one camera is transferring at one
            time, frame rate of both cameras is 1,75 fps.</para><para>In asynchronous image transfer mode both cameras are transferring at same
            time, frame rate of both cameras is 0 fps. Transfers overconsume USB bandwidth,
            and frames are dropping.</para><para></para><para>Example 3: Two host controllers. Camera A is connected to host controller
            A. Camera B is connected to host controller B. Image resolution is 3664x2764.
            Frame rate of one camera is 3,5 fps.</para><para>In synchronous image transfer mode only one camera is transferring at one
            time, frame rate of both cameras is 1,75 fps.</para><para>In asynchronous image transfer mode both cameras are transferring at same
            time, frame rate of both cameras is 3,5 fps. Transfers do not overconsume USB
            bandwidth.</para><para></para><para></para><para>In a camera-hardware independent implementation the corresponding
            information method should be called, in order to ceck what are the supported
            configurations in combination with the connected camera.</para><para></para></remarks>
      <param name="asyncMode">If set to <see langword="true" />, then Asynchronous mode
            is used; otherwise, synchronous mode is used.</param>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.AsynchronousImageTransferGet(System.Boolean,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="asyncMode">If set to <see langword="true" />, then Asynchronous mode
            is used; otherwise, synchronous mode is used.</param>
      <param name="supported">If set to <see langword="true" />, then Asynchronous
            Image Transfer is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraGPIOGet(VFU.IOStatus@,VFU.IOStatus@,VFU.IOStatus@,VFU.IOStatus@)">
      <summary>
            Gets current status of camera I/O
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="in1">Input 1</param>
      <param name="in2">Input 2</param>
      <param name="out1">Output 1</param>
      <param name="out2">Output 2</param>
      <exception cref="!:CameraDisconnectedException">Thrown if camera was disconnected 
            during operation.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraGPIOGet(VFU.IOStatus,VFU.IOStatus,VFU.IOStatus,VFU.IOStatus,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <param name="in1">Input 1</param>
      <param name="in2">Input 2</param>
      <param name="out1">Output 1</param>
      <param name="out2">Output 2</param>
      <param name="supported">
        <description>If set to <see langword="true" />, then the
            selected configuration is supported by the camera ; otherwise, configuration is
            not supported.</description>
      </param>
    </member>
    <member name="M:VFU.IVFUCam.CameraGPIOSet(VFU.IOStatus,VFU.IOStatus)">
      <summary>
            Sets the Outputs of the camera
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="out1">Output 1</param>
      <param name="out2">Output 2</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="out1" /> or <paramref name="out2" /> is invalid.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown if camera was disconnected 
            during operation.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraGPIOSet(VFU.IOStatus,VFU.IOStatus,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="out1">Output 1</param>
      <param name="out2">Output 2</param>
      <param name="supported">If set to <see langword="true" />, then Output setting is
            supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiSet(System.Drawing.Rectangle)">
      <summary>
            Sets the Image Region Of Interest
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="imageRoi">Rectangle to define the ROI</param>
      <exception cref="!:CameraDisconnectedException">Thrown if camera was disconnected 
            during operation.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="imageRoi" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiSet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.ImageRoiInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="imageRoi">Rectange that defines the ROI</param>
      <param name="supported">If set to <see langword="true" />, then this method is
            supported; otherwise, not supported.</param>
      <param name="info">Contains legal values for the Rectangle parameters</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown if camera was
            disconnected  during operation.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown when a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiSet(System.Drawing.Rectangle,VFU.SubsamplingMode,VFU.SkipFactor,VFU.SkipFactor)">
      <summary>
            Sets the Image Region Of Interest
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding
            information method should be called, in order to check what are the
            supported configurations in combination with the connected camera.
            </remarks>
      <param name="imageRoi">Rectangle that defines the ROI</param>
      <param name="sMode">Subsampling mode</param>
      <param name="xSkipFactor">Factor for xSkip</param>
      <param name="ySkipFactor">Factor for ySkip</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="imageRoi" />, <paramref name="sMode" />, 
            <paramref name="xSkipFactor" /> or 
            <paramref name="ySkipFactor" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiSet(System.Drawing.Rectangle,VFU.SubsamplingMode,VFU.SkipFactor,VFU.SkipFactor,System.Boolean@,VFU.SelfDescribingInformation.ImageRoiInfoExt@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="imageRoi">Rectangle that defines the ROI</param>
      <param name="sMode">Subsampling mode</param>
      <param name="xSkipFactor">Factor for xSkip</param>
      <param name="ySkipFactor">Factor for ySkip</param>
      <param name="supported">If set to <see langword="true" />, then the chosen
            setting is supported; otherwise, not supported.</param>
      <param name="info">Contains information of legal values for parameters</param>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="sMode" />, <paramref name="xSkipFactor" /> or 
            <paramref name="ySkipFactor" /> is invalid.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiGet(System.Drawing.Rectangle@)">
      <summary>
            Gets the current setting for the Region Of Interest
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="imageRoi">Rectangle that defines the ROI</param>
      <exception cref="!:CameraDisconnectedException">Thrown if camera was disconnected 
            during operation.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiGet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.ImageRoiInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="imageRoi">Rectangle that defines the ROI</param>
      <param name="supported">If set to <see langword="true" />, then method is
            supported; otherwise, not supported.</param>
      <param name="info">Contains information of legal values for parameters</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiGet(System.Drawing.Rectangle@,VFU.SubsamplingMode@,VFU.SkipFactor@,VFU.SkipFactor@)">
      <summary>
            Gets the current setting for the Region Of Interest
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="imageRoi">Rectangle that defines ROI</param>
      <param name="sMode">Subsampling mode</param>
      <param name="xSkipFactor">Factor for xSkip</param>
      <param name="ySkipFactor">Factor for ySkip</param>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiGet(System.Drawing.Rectangle,VFU.SubsamplingMode,VFU.SkipFactor,VFU.SkipFactor,System.Boolean@,VFU.SelfDescribingInformation.ImageRoiInfoExt@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="imageRoi">rectangle that defines ROI</param>
      <param name="sMode">Subsampling mode</param>
      <param name="xSkipFactor">Factor for xSkip</param>
      <param name="ySkipFactor">Factor for ySkip</param>
      <param name="supported">If set to <see langword="true" />, then chosens setting
            is supported; otherwise, not supported.</param>
      <param name="info">Contains information of legal values for parameters</param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="sMode" />,
            <paramref name="xSkipFactor" /> or <paramref name="ySkipFactor" /> is
            invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageRoiPresetsGet(VFU.ImageRoiPresets[]@)">
      <summary>
            Gets the presets for the Image Region of Interest
            </summary>
      <param name="preset">Contains the Presets of the Image ROI</param>
    </member>
    <member name="M:VFU.IVFUCam.FlipImageSet(VFU.FlipMode)">
      <summary>
            Allowes to flip the image horizontaly and/or verticaly
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="flipMode">
        <list type="bullet">
          <item>
            <description>None</description>
          </item>
          <item>
            <description>FlipX</description>
          </item>
          <item>
            <description>FlipY</description>
          </item>
          <item>
            <description>FlipXY</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when the argument 
            <paramref name="flipMode" /> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.FlipImageSet(VFU.FlipMode,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="flipMode">
        <list type="bullet">
          <item>
            <description>None</description>
          </item>
          <item>
            <description>FlipX</description>
          </item>
          <item>
            <description>FlipY</description>
          </item>
          <item>
            <description>FlipXY</description>
          </item>
        </list>
      </param>
      <param name="supported">If set to <see langword="true" />, then fliping mode is
            supported; otherwise, not supported.</param>
      <exception cref="T:System.ArgumentException">Thrown when the argument 
            <paramref name="flipMode" /> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.FlipImageGet(VFU.FlipMode@)">
      <summary>
            Gets current flip status
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="flipMode">
        <list type="bullet">
          <item>
            <description>None</description>
          </item>
          <item>
            <description>FlipX</description>
          </item>
          <item>
            <description>FlipY</description>
          </item>
          <item>
            <description>FlipXY</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.FlipImageGet(VFU.FlipMode,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="flipMode">
        <list type="bullet">
          <item>
            <description>None</description>
          </item>
          <item>
            <description>FlipX</description>
          </item>
          <item>
            <description>FlipY</description>
          </item>
          <item>
            <description>FlipXY</description>
          </item>
        </list>
      </param>
      <param name="supported">If set to <see langword="true" />, then fliping mode is
            supported ; otherwise, not supported.</param>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="flipMode" /> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainSet(VFU.Gain,System.Double)">
      <summary>
            Gain control
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainFactor">
        <list type="bullet">
          <item>
            <description>Gain Factor</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when one pf the arguments <paramref name="gain" /> or <paramref name="gainFactor" /> has an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainSet(VFU.Gain,System.Double,System.Boolean@,VFU.SelfDescribingInformation.GainInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainFactor">
        <list type="bullet">
          <item>
            <description>Gain Factor</description>
          </item>
        </list>
      </param>
      <param name="supported">
        <list type="bullet">
          <item>
            <description>If set to <see langword="true" />, then chosens Gain setting is
            supported; otherwise, not supported.</description>
          </item>
        </list>
      </param>
      <param name="info">
        <list type="bullet">
          <item>
            <description>contains info about the legal gain
            values</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="gain" /> is
            invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainGet(VFU.Gain,System.Double@)">
      <summary>
            Gets current Gain settings
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainFactor">Gain Factor</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainGet(VFU.Gain,System.Double,System.Boolean@,VFU.SelfDescribingInformation.GainInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainFactor">
        <list type="bullet">
          <item>
            <description>Gain Factor</description>
          </item>
        </list>
      </param>
      <param name="supported">
        <list type="bullet">
          <item>
            <description>If set to <see langword="true" />, then the chosen analogGain is
            supported; otherwise, not supported.</description>
          </item>
        </list>
      </param>
      <param name="info">
        <list type="bullet">
          <item>
            <description>Contains information about the legal values of the single
            gains</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="gain" /> is
            invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainSet(VFU.Gain,System.Int32)">
      <summary>
            Gain control
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainRegValue">
        <list type="bullet">
          <item>
            <description>Register Value of Gain</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when one of the arguments <paramref name="gain" /> or <paramref name="gainRegValue" /> has an invalid
            value.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainSet(VFU.Gain,System.Int32,System.Boolean@,VFU.SelfDescribingInformation.GainRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainRegValue">
        <list type="bullet">
          <item>
            <description>Register Value of Gain</description>
          </item>
        </list>
      </param>
      <param name="supported">
        <list type="bullet">
          <item>
            <description>If set to <see langword="true" />, then chosens Gain setting is
            supported; otherwise, not supported.</description>
          </item>
        </list>
      </param>
      <param name="info">
        <list type="bullet">
          <item>
            <description>Contains information about legar range of
            values</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="gain" /> is
            invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainGet(VFU.Gain,System.Int32@)">
      <summary>
            Gets current Gain settings
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainRegValue">
        <list type="bullet">
          <item>
            <description>Register Value of Gain</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when argument <paramref name="gain" />
            was invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
    </member>
    <member name="M:VFU.IVFUCam.GainGet(VFU.Gain,System.Int32,System.Boolean@,VFU.SelfDescribingInformation.GainRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="analogGain">
        <list type="bullet">
          <item>
            <description>Global</description>
          </item>
          <item>
            <description>Red</description>
          </item>
          <item>
            <description>Green</description>
          </item>
          <item>
            <description>Blue</description>
          </item>
          <item>
            <description>GreenRed</description>
          </item>
          <item>
            <description>GreenBlue</description>
          </item>
        </list>
      </param>
      <param name="gainRegValue">
        <list type="bullet">
          <item>
            <description>Register Value of Gain</description>
          </item>
        </list>
      </param>
      <param name="supported">
        <list type="bullet">
          <item>
            <description>If set to <see langword="true" />, then the chosen analogGain is
            supported; otherwise, not supported.</description>
          </item>
        </list>
      </param>
      <param name="info">
        <list type="bullet">
          <item>
            <description>Contains information about the legal values of the single
            gains</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="gain" /> is
            invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageGet(VFU.VfImageFormat,VFU.VfImage@)">
      <summary>
            Method to get an image from the camera
            </summary>
      <param name="imageFormat">Requested image Format. Legal values are: 
            <para></para><para> Raw8,</para><para> RawBayer8RG,</para><para> RawBayer8GR,</para><para> RawBayer8BG,</para><para> RawBayer8GB,</para><para> Grey8,</para><para></para><para> RGB888,</para><para> BGR888,</para><para> Grey888,</para><para></para><para> Raw10,</para><para> RawBayer10RG,</para><para> RawBayer10GR,</para><para> RawBayer10BG,</para><para> RawBayer10GB,</para><para> Grey10,</para><para></para><para> RGB101010,</para><para> BGR101010,</para><para> Grey101010,</para><para></para><para> Bitmap,</para><para> BitmapGrey,</para><para></para><para> Ignore</para></param>
      <param name="vfImage">Image Object
            <para></para><code lang="C#">public struct VfImage
                {
                    public object ImageData;
                    public int ImageWidth;
                    public int ImageHeight;
                    public VfImageFormat ImageFormat;
                }</code><para></para></param>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="imageFormat" /> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:System.NotSupportedException">Thrown when image format in 
            <paramref name="imageFormat" /> is not supported.</exception>
      <exception cref="!:FrameDroppedException">Thrown when image data has
            dropped. Occurs when not enough USB-Bandwidth is available or less
            system performance. Reducing the camera pixel clock can solve the
            problem. </exception>
      <exception cref="!:CameraDisconnectedException">Thrown when the camera
            was disconnected during image transfer.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ImageGet(VFU.VfImageFormat,VFU.VfImage,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="imageFormat">Chosen ImageFormat</param>
      <param name="vfImage">Image Object</param>
      <param name="supported">If set to <see langword="true" />, then chosen
            ImageFormat is supported; otherwise, not supported.</param>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="imageFormat" /> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeSet(System.Int32)">
      <summary>
            Set the integration Time as sensor specific register value
            </summary>
      <remarks>
            Use just if detailed knoledge about the image sensor is present. Othewhise use
            the eqivalent method that uses a time based parameter
            <para></para><para>In a camera-hardware independent implementation the corresponding
            information method should be called, in order to check what are the supported
            configurations in combination with the connected camera.</para></remarks>
      <param name="integrationRegValue">Integration Time as a sensor specific register
            value</param>
      <exception cref="T:System.ArgumentException">Thrown when the argument 
            <paramref name="integrationRegValue" /> has an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeSet(System.Int32,System.Boolean@,VFU.SelfDescribingInformation.IntegrationTimeRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="integrationRegValue">Integration Time as a sensor specific register
            value</param>
      <param name="supported">If set to <see langword="true" />, then the usage of
            register value is supported; otherwise, not supported.</param>
      <param name="info">Contains information about the legal register values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeGet(System.Int32@)">
      <summary>
            Get the integration Time as sensor specific register value
            </summary>
      <remarks>
            Use just if detailed knoledge about the image sensor is present. Othewhise use
            the eqivalent method that uses a time based parameter
            <para></para><para>In a camera-hardware independent implementation the corresponding
            information method should be called, in order to check what are the supported
            configurations in combination with the connected camera.</para></remarks>
      <param name="integrationRegValue">Integration Time as a sensor specific register
            value</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeGet(System.Int32,System.Boolean@,VFU.SelfDescribingInformation.IntegrationTimeRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="integrationRegValue">Integration Time as a sensor specific register
            value</param>
      <param name="supported">If set to <see langword="true" />, then the usage of
            register value is supported; otherwise, not supported.</param>
      <param name="info">Contains information about the legal register values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeSet(System.Double)">
      <summary>
            Set the integration Time
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="integrationTimeFactor">Integration time in µs</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeSet(System.Double,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="integrationTimeFactor">Integration time in µs</param>
      <param name="supported">If set to <see langword="true" />, then the usage of
            µs-based values is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeGet(System.Double@)">
      <summary>
            Get the integration Time
            </summary>
      <remarks>
        <para>In a camera-hardware independent implementation the corresponding
            information method should be called, in order to check what are the supported
            configurations in combination with the connected camera.</para>
      </remarks>
      <param name="integrationTimeFactorUsec">Integration time in µs</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IntegrationTimeGet(System.Double,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="integrationTimeFactorUsec">Integration time in µs</param>
      <param name="supported">If set to <see langword="true" />, then the usage
            µs-based values is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraNameSet(System.String)">
      <summary>
            Set the camera name
            </summary>
      <remarks>
                    In a camera-hardware independent implementation the corresponding
            information
            <para>        method should be called, in order to check what are the supported
            configurations</para><para>        in combination with the connected camera.</para></remarks>
      <param name="cameraName">String that contains the camera name</param>
    </member>
    <member name="M:VFU.IVFUCam.CameraNameSet(System.String,System.Boolean@,VFU.SelfDescribingInformation.CameraNameInfo@)">
      <summary>
            Corresponding info function
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="cameraName">String that contains the camera name</param>
      <param name="supported">If set to <see langword="true" />, then Method is
            supported; otherwise, not.</param>
      <param name="nameInfo">String Information</param>
    </member>
    <member name="M:VFU.IVFUCam.CameraNameGet(System.String@)">
      <summary>
            Get the Camera Name
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="cameraName">String that contains the Camera Name</param>
    </member>
    <member name="M:VFU.IVFUCam.CameraNameGet(System.String,System.Boolean@,VFU.SelfDescribingInformation.CameraNameInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="cameraName">String that contains the Camera Name</param>
      <param name="supported">If set to <see langword="true" />, then method is
            supported; otherwise, not.</param>
      <param name="nameInfo">String Information</param>
    </member>
    <member name="M:VFU.IVFUCam.CameraInfoFirmwareVersionGet(System.String@)">
      <summary>
            Get information about the Firmware Version of the camera
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="cameraFirmwareVersion">String that contains the Firmware
            Version</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraInfoFirmwareVersionGet(System.String,System.Boolean@)">
      <summary>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="cameraFirmwareVersion">String that contains the Firmware
            Version</param>
      <param name="supported">If set to <see langword="true" />, then method is
            supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraInfoSerialNumberGet(System.String@)">
      <summary>
            Reads Serial Number from the camera
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="cameraSerialNumber">String that contains the Serial Number</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraInfoSerialNumberGet(System.String,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="cameraSerialNumber">String that contains the Serial Number</param>
      <param name="supported">If set to <see langword="true" />, then the read out of
            the Serial Number is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraInfoHardwareVersionGet(System.String@)">
      <summary>
            Read out information about the Hardware Version of the camera
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="cameraHardwareVersion">String that contains the information about
            the Hardware Version</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraInfoHardwareVersionGet(System.String,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="cameraHardwareVersion">String that contains the information about the Hardware Version</param>
      <param name="supported">If set to <see langword="true" />, then the reading of
            the Hardware Version is supported ; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.CameraInfoCameraTypeGet(System.String@)">
      <summary>
            Get the Type of connected Camera
            </summary>
      <param name="cameraType">String that contains the Camera Type</param>
    </member>
    <member name="M:VFU.IVFUCam.LedModeSet(VFU.LedTarget,VFU.LedMode,VFU.LedMode,VFU.LedMode,VFU.LedMode)">
      <summary>
            Set the LED Controler
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="ledTarget">Depending on camera hardware, possible Targets are: 
            <list type="bullet"><item><description>RingConnector</description></item><item><description>BacksideConnector</description></item><item><description>Ignore</description></item></list></param>
      <param name="led1">
        <list type="bullet">
          <item>
            <description>Off</description>
          </item>
          <item>
            <description>On</description>
          </item>
          <item>
            <description>BlinkChannel0,</description>
          </item>
          <item>
            <description>BlinkChannel1</description>
          </item>
          <item>
            <description>Ignore</description>
          </item>
        </list>
      </param>
      <param name="led2">
        <list type="bullet">
          <item>
            <description>like led1</description>
          </item>
        </list>
      </param>
      <param name="led3">
        <list type="bullet">
          <item>
            <description>like led1 </description>
          </item>
        </list>
      </param>
      <param name="led4">
        <list type="bullet">
          <item>
            <description>like led1</description>
          </item>
        </list>
      </param>
      <param name="led4">
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" />, <paramref name="led1" />, 
            <paramref name="led2" />, <paramref name="led3" /> or 
            <paramref name="led4" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedModeSet(VFU.LedTarget,VFU.LedMode,VFU.LedMode,VFU.LedMode,VFU.LedMode,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="ledTarget">Target</param>
      <param name="led1">led 1</param>
      <param name="led2">led 2</param>
      <param name="led3">led 3</param>
      <param name="led4">led 4</param>
      <param name="supported">If set to <see langword="true" />, then stetting is
            supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" />, <paramref name="led1" />, 
            <paramref name="led2" />, <paramref name="led3" /> or 
            <paramref name="led4" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedModeGet(VFU.LedTarget,VFU.LedMode@,VFU.LedMode@,VFU.LedMode@,VFU.LedMode@)">
      <summary>
            Get the LED Controler setting
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="ledTarget">Depending on camera hardware, possible Targets are: 
            <list type="bullet"><item><description>RingConnector</description></item><item><description>BacksideConnector</description></item><item><description>Ignore</description></item></list></param>
      <param name="led1">
        <list type="bullet">
          <item>
            <description>Off</description>
          </item>
          <item>
            <description>On</description>
          </item>
          <item>
            <description>BlinkChannel0,</description>
          </item>
          <item>
            <description>BlinkChannel1</description>
          </item>
          <item>
            <description>Ignore</description>
          </item>
        </list>
      </param>
      <param name="led2">
        <list type="bullet">
          <item>
            <description>like led1</description>
          </item>
        </list>
      </param>
      <param name="led3">
        <list type="bullet">
          <item>
            <description>like led1 </description>
          </item>
        </list>
      </param>
      <param name="led4">
        <list type="bullet">
          <item>
            <description>like led1</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedModeGet(VFU.LedTarget,VFU.LedMode,VFU.LedMode,VFU.LedMode,VFU.LedMode,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="ledTarget">Target</param>
      <param name="led1">led 1</param>
      <param name="led2">led 2</param>
      <param name="led3">led 3</param>
      <param name="led4">led 4</param>
      <param name="supported">If set to <see langword="true" />, then stetting is
            supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" />, <paramref name="led1" />, 
            <paramref name="led2" />, <paramref name="led3" /> or 
            <paramref name="led4" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPrescalerSet(VFU.LedTarget,VFU.LedMode,System.Byte)">
      <summary>
            Set the prescaler for LED Pulse With Modulation
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="ledTarget">Target<list type="bullet"><item><description> RingConnector</description></item><item><description> BacksideConnector</description></item><item><description> Ignore</description></item></list></param>
      <param name="blinkChannel">
        <list type="bullet">
          <item>
            <description>Off</description>
          </item>
          <item>
            <description>On</description>
          </item>
          <item>
            <description>BlinkChannel0</description>
          </item>
          <item>
            <description>BlinkChannel1</description>
          </item>
          <item>
            <description>Ignore</description>
          </item>
        </list>
      </param>
      <param name="prescalerValue">
        <list type="bullet">
          <item>
            <description>Value for the prescaler</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPrescalerSet(VFU.LedTarget,VFU.LedMode,System.Byte,System.Boolean@,VFU.SelfDescribingInformation.LedPrescalerInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="ledTarget">Target</param>
      <param name="blinkChannel">Channel</param>
      <param name="prescalerValue">value for prescaler</param>
      <param name="supported">If set to <see langword="true" />, then prescaler mode is
            supported ; otherwise, not supported.</param>
      <param name="info">contains info about legal settings</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPrescalerGet(VFU.LedTarget,VFU.LedMode,System.Byte@)">
      <summary>
            Get the prescaler for LED Pulse With Modulation
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="ledTarget">
        <list type="bullet">
          <item>
            <description> RingConnector</description>
          </item>
          <item>
            <description> BacksideConnector</description>
          </item>
          <item>
            <description> Ignore</description>
          </item>
        </list>
      </param>
      <param name="blinkChannel">
        <list type="bullet">
          <item>
            <description>Off</description>
          </item>
          <item>
            <description>On</description>
          </item>
          <item>
            <description>BlinkChannel0</description>
          </item>
          <item>
            <description>BlinkChannel1</description>
          </item>
          <item>
            <description>Ignore</description>
          </item>
        </list>
      </param>
      <param name="prescalerValue">
        <list type="bullet">
          <item>
            <description>Value for the prescaler</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPrescalerGet(VFU.LedTarget,VFU.LedMode,System.Byte,System.Boolean@,VFU.SelfDescribingInformation.LedPrescalerInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="ledTarget">Target</param>
      <param name="blinkChannel">Channel</param>
      <param name="prescalerValue">value for Prescaler</param>
      <param name="supported">If set to <see langword="true" />, then prescaler mode is
            supported ; otherwise, not supported.</param>
      <param name="info">contains info about legal settings</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPwmSet(VFU.LedTarget,VFU.LedMode,System.Byte)">
      <summary>
            Sets the Pulse With Modulation used as LED blink base frequency
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="ledTarget">RingConnector, 
            <para> BacksideConnector,</para><para> Ignore</para></param>
      <param name="blinkChannel">Off, On, BlinkChannel0, BlinkChannel1, Ignore</param>
      <param name="pwmValue">Value for PWM</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPwmSet(VFU.LedTarget,VFU.LedMode,System.Byte,System.Boolean@,VFU.SelfDescribingInformation.LedPWMInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="ledTarget">Target</param>
      <param name="blinkChannel">Channel</param>
      <param name="pwmValue">value in percent for Pulse Width</param>
      <param name="supported">If set to <see langword="true" />, then  setting is
            supported; otherwise, not supported.</param>
      <param name="info">contains info about legal values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPwmGet(VFU.LedTarget,VFU.LedMode,System.Byte@)">
      <summary>
            Gets the Pulse With Modulation used as LED blink base frequency
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="ledTarget">RingConnector, 
            <para> BacksideConnector,</para><para> Ignore</para></param>
      <param name="blinkChannel">Off, On, BlinkChannel0, BlinkChannel1, Ignore</param>
      <param name="pwmValue">Value for PWM</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.LedPwmGet(VFU.LedTarget,VFU.LedMode,System.Byte,System.Boolean@,VFU.SelfDescribingInformation.LedPWMInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in combination
            with the connected camera.
            </remarks>
      <param name="ledTarget">Target</param>
      <param name="blinkChannel">Channel</param>
      <param name="pwmValue">PWM value</param>
      <param name="supported">If set to <see langword="true" />, then  setting is
            supported; otherwise, not supported.</param>
      <param name="info">contains info about the legal values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="ledTarget" /> or 
            <paramref name="blinkChannel" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.PixelClockSet(System.Byte)">
      <summary>
            Set the Pixel Clock frequency of the camera
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="frequencyMhz">Frequency value in Megaherz</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="frequencyMHz" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.PixelClockSet(System.Byte,System.Boolean@,VFU.SelfDescribingInformation.PixelClockInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="frequencyMhz">Frequency in MHz</param>
      <param name="supported">If set to <see langword="true" />, then setting of Pixel
            Clock frequency is supported; otherwise, not supported.</param>
      <param name="info">Contains information about the range of legal values for
            frequencyMhz</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.PixelClockGet(System.Byte@)">
      <summary>
            Get the current Pixel Clock frequency of the camera
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="pixelClock">Frequency in MHz</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.PixelClockGet(System.Byte,System.Boolean@,VFU.SelfDescribingInformation.PixelClockInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="pixelClock">Frequency in MHz</param>
      <param name="supported">If set to <see langword="true" />, then setting of Pixel
            Clock frequency is supported; otherwise, not supported.</param>
      <param name="info">Contains information about the range of legal values for
            frequencyMhz</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ResetCameraPerform">
      <summary>
            Performs a Reset of the Camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to check what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.ResetCameraPerform(System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="supported">If set to <see langword="true" />, then a camera reset is
            supported ; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StreamStart(VFU.VfImageFormat,VFU.Streaming.StreamCallbackDelegate,VFU.Streaming.StreamFrameDroppedCallbackDelegate,VFU.Streaming.StreamErrorCallbackDelegate)">
      <summary>
            Start an Image Stream
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="imageFormat">legal settings: 
            <para> Raw8,</para><para> RawBayer8RG,</para><para> RawBayer8GR,</para><para> RawBayer8BG,</para><para> RawBayer8GB,</para><para> Grey8,</para><para></para><para> RGB888,</para><para> BGR888,</para><para> Grey888,</para><para></para><para> Raw10,</para><para> RawBayer10RG,</para><para> RawBayer10GR,</para><para> RawBayer10BG,</para><para> RawBayer10GB,</para><para> Grey10,</para><para></para><para> RGB101010,</para><para> BGR101010,</para><para> Grey101010,</para><para></para><para> Bitmap,</para><para> BitmapGrey,</para><para></para><para> Ignore</para></param>
      <param name="imageCallback">Delegate for Streaming.</param>
      <param name="frameDroppedCallback">Delegate for Dropped Frames</param>
      <param name="streamErrorCallback">Delegate for ErrorCallback</param>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:System.ArgumentException">Thrown when image format is
            invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when 
            <paramref name="imageCallbackMethod" /> is null object.</exception>
      <exception cref="T:VFU.InternalException">Thrown when streaming cannot 
            started due to a internal error.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when the camera
            was disconnected before streaming has started.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StreamStart(VFU.VfImageFormat,System.Boolean@,VFU.Streaming.StreamCallbackDelegate,VFU.Streaming.StreamFrameDroppedCallbackDelegate,VFU.Streaming.StreamErrorCallbackDelegate)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="imageFormat">see list in corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then chosen stetting
            for Stream is supported; otherwise, not supported.</param>
      <param name="imageCallback">Delegate for Streaming.</param>
      <param name="frameDroppedCallback">Delegate for Dropped Frames</param>
      <param name="streamErrorCallback">Delegate for ErrorCallback</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StreamStop">
      <summary>
            Stops any running stream
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StreamStop(System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="supported">If set to <see langword="true" />, then the method is
            supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IsStreamRunning(System.Boolean@)">
      <summary>
            Checks, if there is any stream running
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="running">If set to <see langword="true" />, then there is a running
            stream; otherwise, no running stream.</param>
      <exception cref="T:System.ObjectDisposedException">
            Thrown when the object was disposed.
            </exception>
      <exception cref="T:VFU.InternalException">Thrown when stream running state cannot 
            returned due to a internal error.</exception>
    </member>
    <member name="M:VFU.IVFUCam.IsStreamRunning(System.Boolean,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="running">If set to <see langword="true" />, then there is a stream
            running; otherwise, no stream running.</param>
      <param name="supported">If set to <see langword="true" />, then this method is
            supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerModeSet(VFU.TriggerMode)">
      <summary>
            Sets the Trigger Mode
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="triggerMode">possible settings:
            <list type="bullet"><item><description>FreeRun</description></item><item><description>Trigger</description></item></list></param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="triggerMode" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerModeSet(VFU.TriggerMode,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="triggerMode">possible settings see corrseponding method</param>
      <param name="supported">If set to <see langword="true" />, then chosen Trigger
            Mode is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="triggerMode" /> is invalid.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerModeGet(VFU.TriggerMode@)">
      <summary>
            Gets the current Trigger Mode
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="triggerMode">possible settings:
            <list type="bullet"><item><description>FreeRun</description></item><item><description>Trigger</description></item></list></param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerModeGet(VFU.TriggerMode,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="triggerMode">possible settings see corrseponding method</param>
      <param name="supported">If set to <see langword="true" />, then chosen Trigger
            Mode is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="triggerMode" /> is invalid.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerStatusGet(VFU.IOStatus@)">
      <summary>
            Gets the current Status of Trigger In
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="triggerIn">High
            <para>Low</para><para>Ignore</para></param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerStatusGet(VFU.IOStatus,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="triggerIn">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then sttus request is
            supported ; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerTypeSet(VFU.TriggerType)">
      <summary>
            Set the Trigger Type
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="triggerIn">
        <list type="bullet">
          <item>
            <description>RisingEdge</description>
          </item>
          <item>
            <description>FallingEdge</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="triggerType" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerTypeSet(VFU.TriggerType,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <param name="triggerIn">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then chosen Trigger
            Type is supported; otherwise, not sullorted.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerTypeGet(VFU.TriggerType@)">
      <summary>
            Get the current Trigger Type
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="triggerIn">
        <list type="bullet">
          <item>
            <description>RisingEdge</description>
          </item>
          <item>
            <description>FallingEdge</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerTypeGet(VFU.TriggerType,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <param name="triggerIn">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then chosen Trigger
            Type is supported; otherwise, not sullorted.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerDelaySet(System.UInt16)">
      <summary>
            Set the Delay between Trigger In and start of exposure
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="triggerDelayReg">Delay in Register Values of the Camera Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerDelaySet(System.UInt16,System.Boolean@,VFU.SelfDescribingInformation.TriggerDelayRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="triggerDelayReg">Delay in Register Values of the Camera Controller</param>
      <param name="supported">If set to <see langword="true" />, then this feature is
            supported; otherwise, not supported.</param>
      <param name="info">Contains information about the legal range of register
            values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerDelayGet(System.UInt16@)">
      <summary>
            Get the Delay between Trigger In and start of exposure
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="triggerDelayReg">Delay in Register Values of the Camera Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.TriggerDelayGet(System.UInt16,System.Boolean@,VFU.SelfDescribingInformation.TriggerDelayRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="triggerDelayReg">Delay in Register Values of the Camera Controller</param>
      <param name="supported">If set to <see langword="true" />, then this feature is
            supported; otherwise, not supported.</param>
      <param name="info">Contains information about the legal range of register
            values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDelaySet(System.UInt16)">
      <summary>
            Set the Delay between start of exposure and strobe out
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="strobeDelayReg">Delay in register values of teh Camera Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDelaySet(System.UInt16,System.Boolean@,VFU.SelfDescribingInformation.StrobeDelayRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="strobeDelayReg">Delay in register values of the Camera Controller</param>
      <param name="supported">If set to <see langword="true" />, then Strobe Delay is
            supported; otherwise, not supported.</param>
      <param name="info">contains info about legal values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDelayGet(System.UInt16@)">
      <summary>
            Get the current Delay between start of exposure and strobe out
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="strobeDelayReg">Delay in register values of the Camera Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDelayGet(System.UInt16,System.Boolean@,VFU.SelfDescribingInformation.StrobeDelayRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="strobeDelayReg">Delay in register values of teh Camera Controller</param>
      <param name="supported">If set to <see langword="true" />, then Strobe Delay is
            supported; otherwise, not supported.</param>
      <param name="info">Contains info about legal values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDurationSet(System.UInt16)">
      <summary>
            Set the Duration of Strobe Out
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="strobeDurationReg">Duration of Strobe Out in register values of the Camera Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDurationSet(System.UInt16,System.Boolean@,VFU.SelfDescribingInformation.StrobeDurationRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="strobeDurationReg">Duration of Strobe Out in register values of the Camera Controller</param>
      <param name="supported">If set to <see langword="true" />, then Strobe Duration
            control is supported; otherwise, not supported.</param>
      <param name="info">Contains legal range of register values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDurationGet(System.UInt16@)">
      <summary>
            Get the current Duration of Strobe Out
             </summary>
      <remarks>
             In a camera-hardware independent implementation the corresponding information
             method should be called, in order to ceck what are the supported configurations
             in combination with the connected camera.
             </remarks>
      <param name="strobeDurationReg">Duration of Strobe Out in register values of the Camera Controller</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
             disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
             disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
             has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.StrobeDurationGet(System.UInt16,System.Boolean@,VFU.SelfDescribingInformation.StrobeDurationRegInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="strobeDurationReg">Duration of Strobe Out in register values of the Camera Controller</param>
      <param name="supported">If set to <see langword="true" />, then Strobe Duration
            control is supported; otherwise, not supported.</param>
      <param name="info">Contains legal range of register values</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.SoftwareTriggerPerform">
      <summary>
            Performs a Software Trigger
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.SoftwareTriggerPerform(System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="supported">If set to <see langword="true" />, then Software Trigger
            is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.UserFlashSet(VFU.UserFlashBank,System.String)">
      <summary>
            Set content of User Flash Memory
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="bank">selectable banks are: 
            <list type="bullet"><item><description>Bank_1</description></item><item><description>Bank_2</description></item><item><description>Bank_3</description></item><item><description>Bank_4</description></item></list></param>
      <param name="text">
        <list type="bullet">
          <item>
            <description>String that contains the data</description>
          </item>
        </list>
      </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception has
            occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="bank" /> is
            invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text" /> is
            null.</exception>
    </member>
    <member name="M:VFU.IVFUCam.UserFlashSet(VFU.UserFlashBank,System.String,System.Boolean@,VFU.SelfDescribingInformation.UserFlashInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="bank">see corresponding method</param>
      <param name="text">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then usage of the
            chosen bank is supported ; otherwise, not supported.</param>
      <param name="info">Contains information about legal usage</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="bank" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.UserFlashGet(VFU.UserFlashBank,System.String@)">
      <summary>
            Get content of User Flash Memory
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="bank">selectable banks are:
            <list type="bullet"><item><description>Bank_1</description></item><item><description>Bank_2</description></item><item><description>Bank_3</description></item><item><description>Bank_4</description></item></list></param>
      <param name="text">String that contains the data</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="!:CameraDisconnectedException">Thrown when camera was
            disconnected during operation.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="bank" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.UserFlashGet(VFU.UserFlashBank,System.String,System.Boolean@,VFU.SelfDescribingInformation.UserFlashInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="bank">see corresponding method</param>
      <param name="text">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then usage of the
            chosen bank is supported ; otherwise, not supported.</param>
      <param name="info">Contains information about legal usage</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
      <exception cref="T:System.ArgumentException">Thrown when 
            <paramref name="bank" /> is invalid.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceStatusSet(System.Boolean)">
      <summary>
            Set the Status of Auto White Ballance
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="swbStatus">If set to <see langword="true" />, then Auto White
            Ballanve is used; otherwise, not used.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceStatusSet(System.Boolean,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="swbStatus">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then Auto White
            Ballance is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceStatusGet(System.Boolean@)">
      <summary>
            Get the Status of Auto White Ballance
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="swbStatus">If set to <see langword="true" />, then Auto White
            Ballanve is used; otherwise, not used.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceStatusGet(System.Boolean,System.Boolean@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="swbStatus">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then Auto White
            Ballance is supported; otherwise, not supported.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceFactorsSet(VFU.WhiteBalanceFactors)">
      <summary>
            Set the White Balance Factors
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="wbFactors">        RedFactor
            <para>        GreenFactor</para><para>        BlueFactor</para></param>
      <exception cref="T:System.ObjectDisposedException">Thrown if object is
            disposed.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the white balance factors
            in <paramref name="wbFactors" /> are invalid.</exception>
      <exception cref="T:VFU.InternalException">Thrown when white balance factors cannot 
            changed due to a internal error.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceFactorsSet(VFU.WhiteBalanceFactors,System.Boolean@,VFU.SelfDescribingInformation.WhiteBalanceFactorsInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="wbFactors">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then the setting of
            White Balance Factors is supported; otherwise, not supported.</param>
      <param name="info">Contains information about valid settings of
            wbFactors</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceFactorsGet(VFU.WhiteBalanceFactors@)">
      <summary>
            Get the current White Balance Factors
            </summary>
      <remarks>
            In a camera-hardware independent implementation the corresponding information
            method should be called, in order to ceck what are the supported configurations
            in combination with the connected camera.
            </remarks>
      <param name="wbFactors">        RedFactor
            <para>        GreenFactor</para><para>        BlueFactor</para></param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.IVFUCam.WhiteBalanceFactorsGet(VFU.WhiteBalanceFactors,System.Boolean@,VFU.SelfDescribingInformation.WhiteBalanceFactorsInfo@)">
      <summary>
            Corresponding information method. Use this method to check if the chosen
            configuration is supported in combination with the connected camera.
            </summary>
      <remarks>
            In a camera-hardware independent implementation this information method should
            be called, in order to check what are the supported configurations in
            combination with the connected camera.
            </remarks>
      <param name="wbFactors">see corresponding method</param>
      <param name="supported">If set to <see langword="true" />, then the setting of
            White Balance Factors is supported; otherwise, not supported.</param>
      <param name="info">Contains information about valid settings of
            wbFactors</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="P:VFU.IVFUCam.DataProcessingTarget">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="T:VFU.OperationDeviceType">
      <summary>
            Enumeration with operation device types.
            </summary>
      <remarks>
            Used by <see cref="T:VFU.OperationDeviceInfo" />.
            </remarks>
    </member>
    <member name="F:VFU.OperationDeviceType.OP_DEVICE_NONE">
      <summary>
            No operation device.
            </summary>
    </member>
    <member name="F:VFU.OperationDeviceType.OP_DEVICE_CPU">
      <summary>
            Operation device: Host CPU
            </summary>
    </member>
    <member name="F:VFU.OperationDeviceType.OP_DEVICE_OPENCL">
      <summary>
            Operation device: OpenCL 1.0
            </summary>
    </member>
    <member name="T:VFU.OperationDeviceInfo">
      <summary>
            Information structure for image operation devices. Contains information
            about the type (i.e. CPU or OpenCL) the vendor and platform name
            and the performance of a device.
            </summary>
    </member>
    <member name="M:VFU.OperationDeviceInfo.#ctor(System.String,System.String,VFU.OperationDeviceType,System.String,System.Boolean,System.Double)">
      <summary>
            Constructor. Creates a image operation devices information structure
            given properties.
            </summary>
      <param name="vendorName">see <see cref="P:VFU.OperationDeviceInfo.VendorName" /></param>
      <param name="platformName">see <see cref="P:VFU.OperationDeviceInfo.PlatformName" /></param>
      <param name="deviceType">see <see cref="P:VFU.OperationDeviceInfo.DeviceType" /></param>
      <param name="deviceName">see <see cref="P:VFU.OperationDeviceInfo.DeviceName" /></param>
      <param name="available">see <see cref="P:VFU.OperationDeviceInfo.IsAvailable" /></param>
      <param name="performance">see <see cref="P:VFU.OperationDeviceInfo.Performance" /></param>
    </member>
    <member name="P:VFU.OperationDeviceInfo.VendorName">
      <summary>
            Get the name of the operation device vendor as string.
            </summary>
    </member>
    <member name="P:VFU.OperationDeviceInfo.PlatformName">
      <summary>
            Get the name of the operation device platform as string.
            </summary>
      <remarks>
            In the case if <see cref="P:VFU.OperationDeviceInfo.DeviceType" /> is 
            <see cref="!:DeviceType.OP_DEVICE_CPU" />the platform name is equal to
            the <c>Caption</c> property of the Win32_Processor WMI class. 
            </remarks>
    </member>
    <member name="P:VFU.OperationDeviceInfo.DeviceType">
      <summary>
            Get the device type of the operation device as enumeration 
            <see cref="T:VFU.OperationDeviceType" />.
            </summary>
    </member>
    <member name="P:VFU.OperationDeviceInfo.DeviceName">
      <summary>
            Get the name of the operation device as string.
            </summary>
      <remarks>
            In the case if <see cref="P:VFU.OperationDeviceInfo.DeviceType" /> is 
            <see cref="!:DeviceType.OP_DEVICE_CPU" />the platform name is equal to
            the <c>Name</c> property of the Win32_Processor WMI class. 
            </remarks>
    </member>
    <member name="P:VFU.OperationDeviceInfo.IsAvailable">
      <summary>
            Is set to <c>true</c> if the operation device was available for use in 
            image processing operations.
            </summary>
    </member>
    <member name="P:VFU.OperationDeviceInfo.Performance">
      <summary>
            Get the performance of the device in MHz. 
            </summary>
      <remarks>
            The ComputeUnits 
            if devices as follows: nCores*clockPerCore
            <para>nCores is the number of computing cores of the device.</para><para>clockPerCore is the clock frequency of each core measured in MHz.</para></remarks>
    </member>
    <member name="T:VFU.InternalException">
      <summary>
            Exception class for all internal thrown exceptions which are
            not specially handled.
            </summary>
    </member>
    <member name="M:VFU.InternalException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.InternalException">InternalException</see> class. 
            </summary>
      <param name="message">message</param>
    </member>
    <member name="M:VFU.InternalException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:VFU.InternalException">InternalException</see> class. 
            </summary>
      <param name="message">message</param>
      <param name="inner">inner</param>
    </member>
    <member name="T:VFU.Streaming.StreamCallbackDelegate">
      <summary>Delegate for 8 Bit Raw Streaming.</summary>
      <param name="imagedataRaw8">image data.</param>
      <remarks>Implementation Example:
            <code>
            // Streaming Raw8 Image (Threading) and Update GUI
            delegate void Delegate_UpdateGUI_RawT8();
            Delegate_UpdateGUI_RawT8 delUpdateGUIRawT;
            byte[] m_imagedata_raw;
            // Put this to your constructor
            dimgcall_Raw8 = new veyeDLL.VeyeJ01Cam.delImageCallback_Raw8(getCallback_Raw8);
            // This Method is called by a background thread when image data is aquired and updates the GUI Thread.
            //public void getCallback_Raw8(Byte[] imagedata_raw)
            {
                // convert raw data and show image in image control
            }
            </code></remarks>
    </member>
    <member name="T:VFU.Streaming.StreamFrameDroppedCallbackDelegate">
      <summary>
             Delegate for a callback method that is called when a frame has dropped
             while streaming. Occurs when not enough USB-Bandwidth is available or
             less system performance.
             </summary>
      <remarks>
             Reducing the sensor clock can solve the problem. 
            </remarks>
    </member>
    <member name="T:VFU.Streaming.StreamErrorCallbackDelegate">
      <summary>
            Delegate for a callback method that is called in the case of streaming
            errors. Frame dropping is handled different with an own callback method
            (see <see cref="T:VFU.Streaming.StreamFrameDroppedCallbackDelegate" />).
            </summary>
      <param name="ex">Exception that describes the error which has occurred
            during streaming.</param>
      <remarks>
            Possible exception that can occur:
            <para></para></remarks>
    </member>
    <member name="T:VFU.InvalidTransferException">
      <summary>
            Exception class for invalid bulk transfers.
            </summary>
      <remarks>
            This exception is thrown when no a image data transfer is failed during 
            streaming.
            </remarks>
    </member>
    <member name="M:VFU.InvalidTransferException.#ctor(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:VFU.InvalidTransferException.#ctor(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="inner">
      </param>
    </member>
    <member name="T:VFU.VfImage">
      <summary>
            Structure for Image Handling
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImage.ImageData">
      <summary>
            Image Data Object
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImage.ImageWidth">
      <summary>
            Width of Image
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImage.ImageHeight">
      <summary>
            Height of Image
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImage.ImageFormat">
      <summary>
            Image Format
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.WhiteBalanceFactors">
      <summary>
            Structure for White Balance Factors
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.WhiteBalanceFactors.RedFactor">
      <summary>
            Red Channel factor
            </summary>
    </member>
    <member name="F:VFU.WhiteBalanceFactors.GreenFactor">
      <summary>
            Green Channel factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.WhiteBalanceFactors.BlueFactor">
      <summary>
            Blue Channel factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.ImageRoiPresets">
      <summary>
            Structure for Presets of Image ROI
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.ImageRoiPresets.PresetName">
      <summary>
            Name of Preset
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.ImageRoiPresets.ImageRoi">
      <summary>
            Region of Interest
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.ImageRoiPresets.xSkip">
      <summary>
            X Skip Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.ImageRoiPresets.ySkip">
      <summary>
            Y Skip Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.ImageRoiPresets.sMode">
      <summary>
            Subsampling modus
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.LedTarget">
      <summary>
            Enum for LED Target
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedTarget.RingConnector">
      <summary>
            LED Ring on front site of the camera, if present
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedTarget.BacksideConnector">
      <summary>
            Connector on the back site of the camera, if present
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedTarget.Ignore">
      <summary>
            Ignore, last chosen target will be used
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.TriggerType">
      <summary>
            Enum for Trigger Type
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.TriggerType.RisingEdge">
      <summary>
            Trigger on Rising Edge
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.TriggerType.FallingEdge">
      <summary>
            Trigger on Falling Edge
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.VfImageFormat">
      <summary>
            Enum for VfImageFormat
            </summary>
    </member>
    <member name="F:VFU.VfImageFormat.Raw8">
      <summary>
            Raw Format, 8bit per Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer8RG">
      <summary>
            Raw Bayer Format in RG Orientation, 8bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer8GR">
      <summary>
            Raw Bayer Format in GR Orientation, 8bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer8BG">
      <summary>
            Raw Bayer Format in BG Orientation, 8bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer8GB">
      <summary>
            Raw Bayer Format in GB Orientation, 8bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.Grey8">
      <summary>
            Gray Level Format, 8bit per Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RGB888">
      <summary>
            RGB Format in RGB Orientation, 8bit per Color (24bit per Pixel)
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.BGR888">
      <summary>
            RGB Format in BGR Orientation, 8bit per Color (24bit per Pixel)
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.Grey888">
      <summary>
            Normalized Gray Format, 8bit per Color (24bit per Pixel)
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.Raw10">
      <summary>
            Raw Format, 10bit per Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer10RG">
      <summary>
            Raw Bayer Format in GR Orientation, 10bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer10GR">
      <summary>
            Raw Bayer Format in BG Orientation, 10bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer10BG">
      <summary>
            Raw Bayer Format in BG Orientation, 10bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RawBayer10GB">
      <summary>
            Raw Bayer Format in GB Orientation, 10bit per Pixel
            All RawBayer Formates are used just to give back the exact pattern constelation. These types can not be set!
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.Grey10">
      <summary>
            Gray Level Format, 10bit per Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.RGB101010">
      <summary>
            RGB Format in RGB Orientation, 10bit per Color (30bit per Pixel)
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.BGR101010">
      <summary>
            RGB Format in BGR Orientation, 10bit per Color (24bit per Pixel)
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.Grey101010">
      <summary>
            Normalized Gray Format, 10bit per Color (30bit per Pixel)
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.Bitmap">
      <summary>
            Bitmap
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.BitmapGrey">
      <summary>
            Gray Bitmap 
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.VfImageFormat.Ignore">
      <summary>
            Ignore, last chosen setting will be used
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.Target">
      <summary>
            Enum for AutoBrightness Control Target
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Target.Hardware">
      <summary>
            Use Hardware Functionality, just acessable if present
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Target.Software">
      <summary>
            Use Software Functionality
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Target.Off">
      <summary>
            Off, no usage
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Target.Ignore">
      <summary>
            Ignore, last chosen setting will be used
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.IOStatus">
      <summary>
            Enum for Status of I/O
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.IOStatus.High">
      <summary>
            High Level
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.IOStatus.Low">
      <summary>
            Low Level
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.IOStatus.Ignore">
      <summary>
            Ignore, last chosen setting will be used
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.LedMode">
      <summary>
            Enum for modus of LED Channel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedMode.Off">
      <summary>
            constantly off
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedMode.On">
      <summary>
            constantly on
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedMode.BlinkChannel0">
      <summary>
            Usage of Channel 0
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedMode.BlinkChannel1">
      <summary>
            Usage of Channel 1
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.LedMode.Ignore">
      <summary>
            Ignore, last chosen setting will be used
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.Gain">
      <summary>
            Enum for Gain channels
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Gain.Global">
      <summary>
            Global Gain, access to all Channels
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Gain.Red">
      <summary>
            Gain for Red Channel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Gain.Green">
      <summary>
            Gain for Green Channel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Gain.Blue">
      <summary>
            Gain for Blue Channel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Gain.GreenRed">
      <summary>
            Gain for Green-Red Channel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.Gain.GreenBlue">
      <summary>
            Gain for Green-Blue Channel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SkipFactor">
      <summary>
            Enum for Skip factor for image readout
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SkipFactor.None">
      <summary>
            No Skipping
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SkipFactor.Skip_2x">
      <summary>
            Use every 2nd Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SkipFactor.Skip_4x">
      <summary>
            Use every 4th Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SkipFactor.Skip_8x">
      <summary>
            Use every 8th Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SkipFactor.Skip_16x">
      <summary>
            Use every 16th Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SkipFactor.Skip_32x">
      <summary>
            Use every 32th Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SubsamplingMode">
      <summary>
            Enum for subsampling modus
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SubsamplingMode.None">
      <summary>
            No Subsampling
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SubsamplingMode.Summing">
      <summary>
            All elements will be summed. 
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SubsamplingMode.Binning">
      <summary>
            All Pixels will be averaged 
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.FlipMode">
      <summary>
            Enum for Image Flip Modus
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.FlipMode.None">
      <summary>
            No Flipping
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.FlipMode.FlipX">
      <summary>
            Horizontal Flipping
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.FlipMode.FlipY">
      <summary>
            Vertical Flipping
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.FlipMode.FlipXY">
      <summary>
            Flip in both Directions
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.ImageResolution">
      <summary>
            Enum for number of bits per pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.ImageResolution.Resolution8Bit">
      <summary>
            8bit per Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.ImageResolution.Resolution16Bit">
      <summary>
            16bit per Pixel
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.TriggerMode">
      <summary>
            Enum for trigger modus
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.TriggerMode.FreeRun">
      <summary>
            Free running, Camera is master
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.TriggerMode.Trigger">
      <summary>
            Triggered operation, synced to any other source
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.UserFlashBank">
      <summary>
            Enum for Bank of the User Flash
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.UserFlashBank.Bank_1">
      <summary>
            Bank 1
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.UserFlashBank.Bank_2">
      <summary>
            Bank 2
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.UserFlashBank.Bank_3">
      <summary>
            Bank 3
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.UserFlashBank.Bank_4">
      <summary>
            Bank 4
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.AutoBrightnessSpeedFactorInfo">
      <summary>
            Info Structure for Auto Brightness Speed factor
            </summary>
    </member>
    <member name="F:VFU.SelfDescribingInformation.AutoBrightnessSpeedFactorInfo.SpeedFactor">
      <summary>
            Speed Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.AutoBrightnessTargetBrightnessInfo">
      <summary>
            Info Structure for Target Value of Auto Brightness
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.AutoBrightnessTargetBrightnessInfo.TargetBrightness">
      <summary>
            Target Brightness
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.AutoBrightnessRoiInfo">
      <summary>
            Info Structure for ROI to control Auto Brightness
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.AutoBrightnessRoiInfo.Roi">
      <summary>
            ROI
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.CameraNameInfo">
      <summary>
            Info Structure for Camera Name
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.CameraNameInfo.CameraName">
      <summary>
            Camera name
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.GainInfo">
      <summary>
            Info Structure for Gain
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.GainInfo.gainFactor">
      <summary>
            Gain Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.GainRegInfo">
      <summary>
            Info Structure for Gain as Register Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.GainRegInfo.gainRegValue">
      <summary>
            Gain Register Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ImageRoiInfoExt">
      <summary>
            extended Info Structure for Image ROI
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ImageRoiInfoExt.ImageRoi">
      <summary>
            ROI
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ImageRoiInfoExt.Xskip">
      <summary>
            X Skip Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ImageRoiInfoExt.Yskip">
      <summary>
            Y Skip Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ImageRoiInfoExt.SubsamplingMode">
      <summary>
            Subsampling Mode
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ImageRoiInfo">
      <summary>
            Info Structure for ROI
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ImageRoiInfo.ImageRoi">
      <summary>
            ROI
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.IntegrationTimeRegInfo">
      <summary>
            Info Structure for Integration Time as Register Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.IntegrationTimeRegInfo.integrationRegValue">
      <summary>
            Register Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.IntegrationTimeInfo">
      <summary>
            Info Structure for Integration Time
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.IntegrationTimeInfo.integrationTimeMs">
      <summary>
            Integration Time
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.LedPrescalerInfo">
      <summary>
            Info Structure for LED Prescaler
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.LedPrescalerInfo.prescalerValue">
      <summary>
            Prescaler Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.LedPWMInfo">
      <summary>
            Info Structure for Pulse Width
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.LedPWMInfo.pwmValue">
      <summary>
            Pulse Width
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.PixelClockInfo">
      <summary>
            Info Structure for Pixel Clock
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.PixelClockInfo.FrequencyMHz">
      <summary>
            Pixel Clock Frequency
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.StrobeDelayInfo">
      <summary>
            Info Structure for Strobe Delay
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.StrobeDelayInfo.StrobeDelay">
      <summary>
            Strobe Delay
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.StrobeDelayRegInfo">
      <summary>
            Info Structure for Strobe Delay as Register Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.StrobeDelayRegInfo.StrobeDelayRegValue">
      <summary>
            Register Value of Strobe delay
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.StrobeDurationInfo">
      <summary>
            Info Structure for Strobe Duration
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.StrobeDurationInfo.StrobeDuration">
      <summary>
            Strobe Duration
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.StrobeDurationRegInfo">
      <summary>
            Info Structure for as Register Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.StrobeDurationRegInfo.StrobeDurationRegValue">
      <summary>
            Register Value of Strobe Duration
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.TriggerDelayInfo">
      <summary>
            Info Structure for for Trigger delay
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.TriggerDelayInfo.TriggerDelay">
      <summary>
            Trigger Delay
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.TriggerDelayRegInfo">
      <summary>
            Info Structure for Trigger Delay as Register Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.TriggerDelayRegInfo.TriggerDelayRegValue">
      <summary>
            Register Value of Trigger Delay
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.UserFlashInfo">
      <summary>
            Info Struct for UserFlash-Set and Get methods.
            </summary>
    </member>
    <member name="F:VFU.SelfDescribingInformation.UserFlashInfo.UserFlashBank">
      <summary>
            Bank of User Flash
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.UserFlashInfo.Text">
      <summary>
            Text String
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.WhiteBalanceFactorsInfo">
      <summary>
            Info Structure for White Ballance Factors
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.WhiteBalanceFactorsInfo.RedFactor">
      <summary>
            Red Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.WhiteBalanceFactorsInfo.GreenFactor">
      <summary>
            Green Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.WhiteBalanceFactorsInfo.BlueFactor">
      <summary>
            Blue Factor
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoRoi">
      <summary>
            Structure for Info ROI used in info methods
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoRoi.X">
      <summary>
            X-Start Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoRoi.Y">
      <summary>
            Y-Start Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoRoi.Width">
      <summary>
            Width
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoRoi.Height">
      <summary>
            Height
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoInteger">
      <summary>
            Structur for Integer Info
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoInteger.DefaultValue">
      <summary>
            Default Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoInteger.MinValue">
      <summary>
            Min Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoInteger.MaxValue">
      <summary>
            Max value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoIntegerExt">
      <summary>
            extended Structur for Integer Info
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerExt.DefaultValue">
      <summary>
            Default Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerExt.MinValue">
      <summary>
            Min Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerExt.MaxValue">
      <summary>
            Max Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerExt.SupportedValues">
      <summary>
            Supported Values
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoIntegerArr">
      <summary>
            Structure for Integer Array Info
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArr.DefaultArray">
      <summary>
            Default Array
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArr.MinLength">
      <summary>
            Min Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArr.MaxLength">
      <summary>
            Max Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoIntegerArrExt">
      <summary>
            Extended Structure for Integer Array Info
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArrExt.DefaultValues">
      <summary>
            Default Values
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArrExt.MinLength">
      <summary>
            Min Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArrExt.MaxLength">
      <summary>
            Max Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArrExt.MinValue">
      <summary>
            Min Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoIntegerArrExt.MaxValue">
      <summary>
            Max Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoFloat">
      <summary>
            Structur for Float Info
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloat.DefaultValue">
      <summary>
            Default Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloat.MinValue">
      <summary>
            Min Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloat.MaxValue">
      <summary>
            Max Value
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoFloatArr">
      <summary>
            Structur for Float Info Array
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloatArr.element">
      <summary>
            Element
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloatArr.MinLength">
      <summary>
            Min Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloatArr.MaxLength">
      <summary>
            Max Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloatArr.SupportedValues">
      <summary>
            Supported Values
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoFloatArr.DefaultArr">
      <summary>
            Default Array
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoString">
      <summary>
            Structure for String Info
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoString.DefaultString">
      <summary>
            Default String
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoString.MinLength">
      <summary>
            Min Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoString.MaxLength">
      <summary>
            Max Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.SelfDescribingInformation.ParaInfoStringArr">
      <summary>
            Structure for Info String Array
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoStringArr.DefaultStrings">
      <summary>
            Default Strings
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoStringArr.MinArrayLength">
      <summary>
            Min Array Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoStringArr.MaxArrayLength">
      <summary>
            Max Array Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoStringArr.MinStringLength">
      <summary>
            Min String Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:VFU.SelfDescribingInformation.ParaInfoStringArr.MaxStringLength">
      <summary>
            Max String Length
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:VFU.P031.P031Cam">
      <summary>v-eye031Cam class.</summary>
    </member>
    <member name="M:VFU.P031.P031Cam.#ctor(CyUSB.CyFX2Device,System.Int32)">
      <summary>
            VFU-P031 camera constructor. Objects are initiated internally. Do not call this constructor.
            </summary>
      <param name="fx2Device">v-eye camera found in USB-Device List</param>
      <param name="cameraId">The device handle</param>
      <param name="triggerMode">
      </param>
    </member>
    <member name="M:VFU.P031.P031Cam.Finalize">
      <summary>
            Destructor.
            </summary>
      <remarks>
            Calling Dispose().
            </remarks>
    </member>
    <member name="M:VFU.P031.P031Cam._AutoBrightnessEnableSet(System.Boolean,System.Boolean@)">
      <summary>
            Support check and parameter range for 
            <see cref="M:VFU.P031.P031Cam._AutoBrightnessEnableSet(System.Boolean)" />.
            </summary>
      <param name="enable">Only for signature. Pass <c>false</c></param>
      <param name="supported">Support variable. Is <c>true</c> when method
            <see cref="M:VFU.P031.P031Cam._AutoBrightnessEnableSet(System.Boolean)" /> is supported.
            Otherwise <c>false</c>.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.P031.P031Cam._AutoBrightnessEnableGet(System.Boolean@)">
      <summary>
            Get the current enable status automatic brightness control. 
            </summary>
      <param name="enable">Current automatric brightness control enable
            status. Is <c>true</c> when enabled and <c>false</c> otherwise.
            </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.P031.P031Cam._AutoBrightnessEnableGet(System.Boolean,System.Boolean@)">
      <summary>
            Support check and parameter range for <see cref="M:VFU.P031.P031Cam._AutoBrightnessEnableGet(System.Boolean@)" />.
            </summary>
      <param name="enable">Only for signature. Pass <c>false</c></param>
      <param name="supported">Support variable. Is <c>true</c> when method
            <see cref="M:VFU.P031.P031Cam._AutoBrightnessEnableGet(System.Boolean@)" /> is supported.
            Otherwise <c>false</c>.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.P031.P031Cam.Dispose(System.Boolean)">
      <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
      <param name="disposing">
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
    </member>
    <member name="M:VFU.P031.P031Cam.AutoBrightnessControlSet(VFU.Target,VFU.Target)">
      <summary>
            Configure Automatic brightness control.
            </summary>
      <param name="aecStatus">Set AEC Status.</param>
      <param name="agcStatus">Set AGC Status.</param>
      <param name="target">Select rendering target.</param>
    </member>
    <member name="M:VFU.P031.P031Cam.AutoBrightnessControlGet(VFU.Target,VFU.Target,System.Boolean@)">
      <summary>
            Parameterinfo for AutoBrightnessSetGet method.
            </summary>
      <param name="aecStatus">Please select.</param>
      <param name="agcStatus">Please select.</param>
      <param name="target">Please select.</param>
      <param name="info">AutoBrigthnessInfo.</param>
      <remarks>
            MeasureRoi (messRoi) size depends on ImageRoi size.
            </remarks>
    </member>
    <member name="M:VFU.P031.P031Cam.AutoBrightnessRoiSet(System.Drawing.Rectangle)">
      <summary>
            Configure Automatic brigthness control.
            </summary>
      <param name="messRoi">Set measure window. Set "null" use current windows size.</param>
    </member>
    <member name="M:VFU.P031.P031Cam.AutoBrightnessRoiSet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessRoiInfo@)">
      <summary>
      </summary>
      <param name="messRoi">
      </param>
      <param name="supported">
      </param>
      <param name="info">
      </param>
    </member>
    <member name="M:VFU.P031.P031Cam.AutoBrightnessRoiGet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessRoiInfo@)">
      <summary>
            Parameterinfo for AutoBrightnessSetGet method.
            </summary>
      <param name="messRoi">Indifferent parameter. Default=null.</param>
      <param name="info">AutoBrigthnessInfo.</param>
      <remarks>
            MeasureRoi (messRoi) size depends on ImageRoi size.
            </remarks>
    </member>
    <member name="M:VFU.P031.P031Cam.CameraInfoCameraTypeGet(System.String@)">
      <summary>
             Get the VFU camera type name.
            </summary>
      <returns>Camera name string.</returns>
    </member>
    <member name="M:VFU.P031.P031Cam.PixelClockSet(System.Byte,System.Boolean@,VFU.SelfDescribingInformation.PixelClockInfo@)">
      <summary>
            Parameterinfo for PixelClockSet method.
            </summary>
      <param name="frequencyMhz">Indifferent parameter. Default=0.</param>
      <param name="info">PixelClockInfo.</param>
    </member>
    <member name="M:VFU.P031.P031Cam.PixelClockGet(System.Byte@)">
      <summary>
            Get the frequency of pixel clock in MHz steps.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:VFU.P031.P031Cam.PixelClockGet(System.Byte,System.Boolean@,VFU.SelfDescribingInformation.PixelClockInfo@)">
      <summary>
            Parameterinfo for PixelClockGet method.
            </summary>
      <param name="pixelClock">Indifferent parameter. Default=0.</param>
      <param name="info">PixelClockInfo.</param>
    </member>
    <member name="M:VFU.P031.P031Cam.UserFlashSet(VFU.UserFlashBank,System.String)">
      <summary>
            Writes a string into a UserFlashBank of the internal flash of the camera.
            </summary>
      <param name="bank">
            Select a UserFlashBank in which the string has to be stored.
            </param>
      <param name="text">Text that has to be stored in UserFlashBank.
            Bank0: Default Value: "UserString0". MinLength=0. MaxVLength=28.
            Bank1: Default Value: "UserString1". MinLength=0. MaxVLength=48.
            Bank2: Default Value: "UserString2". MinLength=0. MaxVLength=98.
            Bank3: Default Value: "UserString3". MinLength=0. MaxVLength=2098.
            </param>
    </member>
    <member name="M:VFU.P031.P031Cam.UserFlashSet(VFU.UserFlashBank,System.String,System.Boolean@,VFU.SelfDescribingInformation.UserFlashInfo@)">
      <summary>
            Parameterinfo for UserFlashSet method.
            </summary>
      <param name="bank">Select UserFlashBank.</param>
      <param name="text">Indifferent parameter. Default="".</param>
      <param name="info">UserFlashInfo.</param>
    </member>
    <member name="M:VFU.P031.P031Cam.UserFlashGet(VFU.UserFlashBank,System.String@)">
      <summary>
            Reads a string from a UserFlashBank of the internal flash of the camera.
            </summary>
      <param name="bank">
            Select a UserFlashBank in which the string is stored.
            </param>
      <param name="text">
      </param>
    </member>
    <member name="M:VFU.P031.P031Cam.UserFlashGet(VFU.UserFlashBank,System.String,System.Boolean@,VFU.SelfDescribingInformation.UserFlashInfo@)">
      <summary>
            Parameterinfo for UserFlashGet method.
            </summary>
      <param name="bank">Select UserFlashBank.</param>
      <param name="text">Indifferent parameter. Default="".</param>
      <param name="info">UserFlashInfo.</param>
    </member>
    <member name="M:VFU.P031.P031Cam.CamIdGet(System.Int32@)">
      <summary>
            Get the unique camera identify number (ID).
            </summary>
      <param name="camId">
      </param>
    </member>
    <member name="M:VFU.P031.P031Cam.Dispose">
      <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
    </member>
    <member name="P:VFU.P031.P031Cam.DataProcessingTarget">
      <summary>
            Get information about the current data
            processing target for data preprocessing and interpolation.
            </summary>
    </member>
    <member name="T:VFU.V024.V024Cam">
      <summary>V024Cam class.</summary>
    </member>
    <member name="M:VFU.V024.V024Cam.AutoBrightnessControlSet(VFU.Target,VFU.Target)">
      <summary>
            Configure Automatic brightness control.
            </summary>
      <param name="aecStatus">Set AEC Status.</param>
      <param name="agcStatus">Set AGC Status.</param>
      <param name="target">Select rendering target.</param>
    </member>
    <member name="M:VFU.V024.V024Cam.AutoBrightnessControlGet(VFU.Target,VFU.Target,System.Boolean@)">
      <summary>
            Parameterinfo for AutoBrightnessSetGet method.
            </summary>
      <param name="aecStatus">Please select.</param>
      <param name="agcStatus">Please select.</param>
      <param name="target">Please select.</param>
      <param name="info">AutoBrigthnessInfo.</param>
      <remarks>
            MeasureRoi (messRoi) size depends on ImageRoi size.
            </remarks>
    </member>
    <member name="M:VFU.V024.V024Cam.AutoBrightnessRoiSet(System.Drawing.Rectangle)">
      <summary>
            Configure Automatic brigthness control.
            </summary>
      <param name="messRoi">Set measure window. Set "null" use current windows size.</param>
    </member>
    <member name="M:VFU.V024.V024Cam.AutoBrightnessRoiSet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessRoiInfo@)">
      <summary>
      </summary>
      <param name="messRoi">
      </param>
      <param name="supported">
      </param>
      <param name="info">
      </param>
    </member>
    <member name="M:VFU.V024.V024Cam.AutoBrightnessRoiGet(System.Drawing.Rectangle,System.Boolean@,VFU.SelfDescribingInformation.AutoBrightnessRoiInfo@)">
      <summary>
            Parameterinfo for AutoBrightnessSetGet method.
            </summary>
      <param name="messRoi">Indifferent parameter. Default=null.</param>
      <param name="info">AutoBrigthnessInfo.</param>
      <remarks>
            MeasureRoi (messRoi) size depends on ImageRoi size.
            </remarks>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_OnOff(System.Boolean)">
      <summary>
            Enables or disables the High Dynamic Range Mode (HDR Mode) of the camera. Default: HDR Mode is disabled.
            </summary>
      <param name="hdrEnable">true: enables HDR Mode. false: disables HDR Mode.</param>
      <returns>true: HDR Mode successfully enabled. false: Failure while parametrize.</returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_OnOff_Status">
      <summary>
            Gives back: High Dynamic Range Mode (HDR Mode) Status. Default: HDR Mode is disabled.
            </summary>
      <returns>1: HDR Mode is enabled. 0: HDR Mode is disabled. -1: Read error.</returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_AutoAdjust_Set(System.Boolean)">
      <summary>
            Select "Auto Adjust Knee Time" or "Manual Adjust Knee Time" for High Dynamic Range Mode (HDR Mode) 
            </summary>
      <param name="enable">true: enable "Auto Adjust Knee Time". false: disable "Auto Adjust Knee Time"</param>
      <returns>true: "Auto Adjust Knee Time" successfully enabled or disabled. false: Failure while parametrize.</returns>
      <remarks>Default: Auto adjust is enabled. </remarks>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_AutoAdjust_Status">
      <summary>
            Gives back if "Auto Adjust Knee Time" or "Manual Adjust Knee Time" is selected for High Dynamic Range Mode (HDR).
            </summary>
      <returns>1: "Auto Adjust Knee Time" is enabled. 0: "Manual Adjust Knee Time" is enabled. -1: Read error.</returns>
      <remarks>
            Default: "Auto Adjust Knee Time" is enabled.
            </remarks>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_NumberOfKnees_Set(System.Boolean)">
      <summary>
            Select "one Knee" or "two Knees" for High Dynamic Range Mode (HDR Mode). 
            </summary>
      <param name="twoKneesEnable">true: Select two knees. false: Select one knee.</param>
      <returns>true: number of knees successfully changed. false: Failure while parametrize.</returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_NumberOfKnees_Status">
      <summary>
            Gives back if "one knee" or "two knees" is selected for High Dynamic Range Mode (HDR Mode).
            </summary>
      <returns>0: two knees (Default). 1: one knee. -1: Read error.</returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_KneeVoltages_RegValues_Set(System.Int16[])">
      <summary>
            Set "Knee Voltages" for High Dynamic Range Mode (HDR Mode) in register values.
            </summary>
      <param name="kneeVoltageRegvalue">Knee Voltage in register value. Legal values: 0-31</param>
      <returns>true: Knee Voltages successfully set. false: Failure while parametrize.</returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_KneeVoltages_RegValues_Status">
      <summary>
            Get status of "Knee Voltages" for High Dynamic Range mode (HDR) in register values.
            </summary>
      <returns>
            legal values: 0-31
            <para>Value[0] = Voltage1 (default: 29)</para><para>Value[1] = Voltage2 (default: 24)</para><para>Value[2] = Voltage3 (default: 21)</para><para>Value[3] = Voltage4 (default: 4)</para>
            short kneeVoltages[0] = -1: Read error.
            </returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_KneeRatioTimes_Set(System.Int16[])">
      <summary>
            Set "Knee Ratio Time" T2 and T3 for High Dynamic Range Mode (HDR Mode).
            </summary>
      <param name="kneeRatioTimes">Knee Ratio Time value. Legal values: 0-15. kneeRatioTimes[0] = Knee Ratio T2 (default: 4). Value[1] = Knee Ratio T3 (default: 6)</param>
      <returns>true: "Knee Ratio Time" T2 and T3 successfully set. false: Failure while parametrize.</returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_KneeRatioTimes_Status">
      <summary>
            Get "Knee Ratio Time" T2 and T3 for High Dynamic Range Mode (HDR Mode).
            </summary>
      <returns>
            legal values: 0-15
            <para>Value[0] = Knee Ratio T2 (default: 4)</para><para>Value[1] = Knee Ratio T3 (default: 6)</para><para>short ratioTimes[0] = -1: Read error.</para></returns>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_KneeTimes_RegValues_Set(System.Int16[])">
      <summary>
            Set "Knee Times" for High Dynamic Range Mode (HDR Mode) in register values.
            </summary>
      <param name="kneeTime">
        <para>kneeTime[0] = knee time 1 (shutter width 1). Legal values: 1-480 (Default: 443).</para>
        <para>kneeTime[1] = knee time 2 (shutter width 2). Legal values: 1-480 (Default: 473)</para>
      </param>
      <returns>true: "Knee Times" successfully set. false: Failure while parametrize.</returns>
      <remarks>
        <para>If "Total Shutter Width time" is less "Shutter Width 1 time": "Shutter Width 1 time" = "Total Shutter Width time"</para>
        <para>If "Total Shutter Width time" is less "Shutter Width 2 time": "Shutter Width 2 time" = "Total Shutter Width time"</para>
      </remarks>
    </member>
    <member name="M:VFU.V024.V024Cam.HDR_KneeTimes_RegValues_Status">
      <summary>
            Get "Knee Times" for High Dynamic Range Mode (HDR Mode) in register values.
            </summary>
      <returns>
        <para>knee time 1 (shutter width 1) legal values: 1-480 (Default: 443)</para>
        <para>knee time 2 (shutter width 2) legal values: 1-480 (Default: 473)</para>
            short kneeTimes[0] = -1: Read error.
            </returns>
      <remarks>
        <para>If "Total Shutter Width time" is less "Shutter Width 1 time": "Shutter Width 1 time" = "Total Shutter Width time"</para>
        <para>If "Total Shutter Width time" is less "Shutter Width 2 time": "Shutter Width 2 time" = "Total Shutter Width time"</para>
      </remarks>
    </member>
    <member name="M:VFU.V024.V024Cam.CameraInfoCameraTypeGet(System.String@)">
      <summary>
             Get the VFU camera type name.
            </summary>
      <returns>Camera name string.</returns>
    </member>
    <member name="M:VFU.V024.V024Cam.PixelClockSet(System.Byte,System.Boolean@,VFU.SelfDescribingInformation.PixelClockInfo@)">
      <summary>
            Parameterinfo for PixelClockSet method.
            </summary>
      <param name="frequencyMhz">Indifferent parameter. Default=0.</param>
      <param name="info">PixelClockInfo.</param>
    </member>
    <member name="M:VFU.V024.V024Cam.PixelClockGet(System.Byte@)">
      <summary>
            Get the frequency of pixel clock in MHz steps.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:VFU.V024.V024Cam.PixelClockGet(System.Byte,System.Boolean@,VFU.SelfDescribingInformation.PixelClockInfo@)">
      <summary>
            Parameterinfo for PixelClockGet method.
            </summary>
      <param name="pixelClock">Indifferent parameter. Default=0.</param>
      <param name="info">PixelClockInfo.</param>
    </member>
    <member name="M:VFU.V024.V024Cam.UserFlashSet(VFU.UserFlashBank,System.String)">
      <summary>
            Writes a string into a UserFlashBank of the internal flash of the camera.
            </summary>
      <param name="bank">
            Select a UserFlashBank in which the string has to be stored.
            </param>
      <param name="text">Text that has to be stored in UserFlashBank.
            Bank0: Default Value: "UserString0". MinLength=0. MaxVLength=28.
            Bank1: Default Value: "UserString1". MinLength=0. MaxVLength=48.
            Bank2: Default Value: "UserString2". MinLength=0. MaxVLength=98.
            Bank3: Default Value: "UserString3". MinLength=0. MaxVLength=2098.
            </param>
    </member>
    <member name="M:VFU.V024.V024Cam.UserFlashSet(VFU.UserFlashBank,System.String,System.Boolean@,VFU.SelfDescribingInformation.UserFlashInfo@)">
      <summary>
            Parameterinfo for UserFlashSet method.
            </summary>
      <param name="bank">Select UserFlashBank.</param>
      <param name="text">Indifferent parameter. Default="".</param>
      <param name="info">UserFlashInfo.</param>
    </member>
    <member name="M:VFU.V024.V024Cam.UserFlashGet(VFU.UserFlashBank,System.String@)">
      <summary>
            Reads a string from a UserFlashBank of the internal flash of the camera.
            </summary>
      <param name="bank">
            Select a UserFlashBank in which the string is stored.
            </param>
      <param name="text">
      </param>
    </member>
    <member name="M:VFU.V024.V024Cam.UserFlashGet(VFU.UserFlashBank,System.String,System.Boolean@,VFU.SelfDescribingInformation.UserFlashInfo@)">
      <summary>
            Parameterinfo for UserFlashGet method.
            </summary>
      <param name="bank">Select UserFlashBank.</param>
      <param name="text">Indifferent parameter. Default="".</param>
      <param name="info">UserFlashInfo.</param>
    </member>
    <member name="M:VFU.V024.V024Cam.CamIdGet(System.Int32@)">
      <summary>
            Get the unique camera identify number (ID).
            </summary>
      <param name="camId">
      </param>
    </member>
    <member name="M:VFU.V024.V024Cam.Dispose">
      <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
    </member>
    <member name="M:VFU.V024.V024Cam.#ctor(CyUSB.CyFX2Device,System.Int32)">
      <summary>
            VFU-V024 camera constructor. Objects are initiated internally. Do not call this constructor.
            </summary>
      <param name="fx2Device">v-eye camera found in USB-Device List</param>
      <param name="cameraId">The device handle.</param>
    </member>
    <member name="M:VFU.V024.V024Cam.Finalize">
      <summary>
            Destructor.
            </summary>
      <remarks>
            Calling Dispose().
            </remarks>
    </member>
    <member name="M:VFU.V024.V024Cam._AutoBrightnessEnableSet(System.Boolean,System.Boolean@)">
      <summary>
            Support check and parameter range for 
            <see cref="M:VFU.V024.V024Cam._AutoBrightnessEnableSet(System.Boolean)" />.
            </summary>
      <param name="enable">Only for signature. Pass <c>false</c></param>
      <param name="supported">Support variable. Is <c>true</c> when method
            <see cref="M:VFU.V024.V024Cam._AutoBrightnessEnableSet(System.Boolean)" /> is supported.
            Otherwise <c>false</c>.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.V024.V024Cam._AutoBrightnessEnableGet(System.Boolean@)">
      <summary>
            Get the current enable status automatic brightness control. 
            </summary>
      <param name="enable">Current automatric brightness control enable
            status. Is <c>true</c> when enabled and <c>false</c> otherwise.
            </param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.V024.V024Cam._AutoBrightnessEnableGet(System.Boolean,System.Boolean@)">
      <summary>
            Support check and parameter range for <see cref="M:VFU.V024.V024Cam._AutoBrightnessEnableGet(System.Boolean@)" />.
            </summary>
      <param name="enable">Only for signature. Pass <c>false</c></param>
      <param name="supported">Support variable. Is <c>true</c> when method
            <see cref="M:VFU.V024.V024Cam._AutoBrightnessEnableGet(System.Boolean@)" /> is supported.
            Otherwise <c>false</c>.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when object is
            disposed.</exception>
      <exception cref="T:VFU.InternalException">Thrown if a internal exception
            has occurred.</exception>
    </member>
    <member name="M:VFU.V024.V024Cam.Dispose(System.Boolean)">
      <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
      <param name="disposing">
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
    </member>
    <member name="P:VFU.V024.V024Cam.DataProcessingTarget">
      <summary>
            Get information about the current data
            processing target for data preprocessing and interpolation.
            </summary>
    </member>
  </members>
</doc>